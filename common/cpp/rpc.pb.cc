// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* RpcRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcRequest_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Execute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Execute_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Response_JobStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MakeNamesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeNamesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeNamesRequest_Name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeNamesRequest_Name_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeCommentsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeCommentsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeCommentsRequest_Name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeCommentsRequest_Name_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMemoryMapResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMemoryMapResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMemoryMapResult_Memory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMemoryMapResult_Memory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadMemoryRegionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadMemoryRegionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadMemoryRegionsRequest_Region_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadMemoryRegionsRequest_Region_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadMemoryRegionsResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadMemoryRegionsResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadMemoryRegionsResult_Memory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadMemoryRegionsResult_Memory_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalyzeExternalRefsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalyzeExternalRefsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalyzeExternalRefsResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalyzeExternalRefsResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalyzeExternalRefsResult_PointerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalyzeExternalRefsResult_PointerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalyzeExternalRefsResult_RefData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalyzeExternalRefsResult_RefData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AnalyzeExternalRefsResult_RefData_RefType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AnalyzeExternalRefsResult_reg_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalyzeExternalRefsResult_reg_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPEHeadersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPEHeadersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPEHeadersResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPEHeadersResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPEHeadersResult_Exports_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPEHeadersResult_Exports_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPEHeadersResult_Section_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPEHeadersResult_Section_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBackendInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBackendInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoCompleteCodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoCompleteCodeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoCompleteCodeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoCompleteCodeResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoCompleteCodeResult_CallSignature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoCompleteCodeResult_CallSignature_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoCompleteCodeResult_CallSignature_Param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoCompleteCodeResult_CallSignature_Param_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_2eproto() {
  protobuf_AddDesc_rpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc.proto");
  GOOGLE_CHECK(file != NULL);
  RpcRequest_descriptor_ = file->message_type(0);
  static const int RpcRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, make_names_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, make_comments_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, read_memory_regions_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, analyze_external_refs_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, check_pe_headers_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, auto_complete_code_req_),
  };
  RpcRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcRequest_descriptor_,
      RpcRequest::default_instance_,
      RpcRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcRequest));
  RpcRequest_RequestType_descriptor_ = RpcRequest_descriptor_->enum_type(0);
  Execute_descriptor_ = file->message_type(1);
  static const int Execute_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execute, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execute, script_extern_obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execute, rpc_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execute, background_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execute, job_id_),
  };
  Execute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Execute_descriptor_,
      Execute::default_instance_,
      Execute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Execute));
  Response_descriptor_ = file->message_type(2);
  static const int Response_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, std_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, std_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, rpc_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, job_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, script_result_obj_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Response_JobStatus_descriptor_ = Response_descriptor_->enum_type(0);
  MakeNamesRequest_descriptor_ = file->message_type(3);
  static const int MakeNamesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeNamesRequest, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeNamesRequest, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeNamesRequest, remote_base_),
  };
  MakeNamesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeNamesRequest_descriptor_,
      MakeNamesRequest::default_instance_,
      MakeNamesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeNamesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeNamesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeNamesRequest));
  MakeNamesRequest_Name_descriptor_ = MakeNamesRequest_descriptor_->nested_type(0);
  static const int MakeNamesRequest_Name_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeNamesRequest_Name, ea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeNamesRequest_Name, name_),
  };
  MakeNamesRequest_Name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeNamesRequest_Name_descriptor_,
      MakeNamesRequest_Name::default_instance_,
      MakeNamesRequest_Name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeNamesRequest_Name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeNamesRequest_Name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeNamesRequest_Name));
  MakeCommentsRequest_descriptor_ = file->message_type(4);
  static const int MakeCommentsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCommentsRequest, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCommentsRequest, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCommentsRequest, remote_base_),
  };
  MakeCommentsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeCommentsRequest_descriptor_,
      MakeCommentsRequest::default_instance_,
      MakeCommentsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCommentsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCommentsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeCommentsRequest));
  MakeCommentsRequest_Name_descriptor_ = MakeCommentsRequest_descriptor_->nested_type(0);
  static const int MakeCommentsRequest_Name_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCommentsRequest_Name, ea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCommentsRequest_Name, name_),
  };
  MakeCommentsRequest_Name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeCommentsRequest_Name_descriptor_,
      MakeCommentsRequest_Name::default_instance_,
      MakeCommentsRequest_Name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCommentsRequest_Name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCommentsRequest_Name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeCommentsRequest_Name));
  GetMemoryMapResult_descriptor_ = file->message_type(5);
  static const int GetMemoryMapResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemoryMapResult, memories_),
  };
  GetMemoryMapResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMemoryMapResult_descriptor_,
      GetMemoryMapResult::default_instance_,
      GetMemoryMapResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemoryMapResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemoryMapResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMemoryMapResult));
  GetMemoryMapResult_Memory_descriptor_ = GetMemoryMapResult_descriptor_->nested_type(0);
  static const int GetMemoryMapResult_Memory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemoryMapResult_Memory, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemoryMapResult_Memory, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemoryMapResult_Memory, access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemoryMapResult_Memory, name_),
  };
  GetMemoryMapResult_Memory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMemoryMapResult_Memory_descriptor_,
      GetMemoryMapResult_Memory::default_instance_,
      GetMemoryMapResult_Memory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemoryMapResult_Memory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemoryMapResult_Memory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMemoryMapResult_Memory));
  ReadMemoryRegionsRequest_descriptor_ = file->message_type(6);
  static const int ReadMemoryRegionsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsRequest, regions_),
  };
  ReadMemoryRegionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadMemoryRegionsRequest_descriptor_,
      ReadMemoryRegionsRequest::default_instance_,
      ReadMemoryRegionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadMemoryRegionsRequest));
  ReadMemoryRegionsRequest_Region_descriptor_ = ReadMemoryRegionsRequest_descriptor_->nested_type(0);
  static const int ReadMemoryRegionsRequest_Region_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsRequest_Region, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsRequest_Region, size_),
  };
  ReadMemoryRegionsRequest_Region_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadMemoryRegionsRequest_Region_descriptor_,
      ReadMemoryRegionsRequest_Region::default_instance_,
      ReadMemoryRegionsRequest_Region_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsRequest_Region, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsRequest_Region, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadMemoryRegionsRequest_Region));
  ReadMemoryRegionsResult_descriptor_ = file->message_type(7);
  static const int ReadMemoryRegionsResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsResult, memories_),
  };
  ReadMemoryRegionsResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadMemoryRegionsResult_descriptor_,
      ReadMemoryRegionsResult::default_instance_,
      ReadMemoryRegionsResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadMemoryRegionsResult));
  ReadMemoryRegionsResult_Memory_descriptor_ = ReadMemoryRegionsResult_descriptor_->nested_type(0);
  static const int ReadMemoryRegionsResult_Memory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsResult_Memory, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsResult_Memory, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsResult_Memory, mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsResult_Memory, protect_),
  };
  ReadMemoryRegionsResult_Memory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadMemoryRegionsResult_Memory_descriptor_,
      ReadMemoryRegionsResult_Memory::default_instance_,
      ReadMemoryRegionsResult_Memory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsResult_Memory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMemoryRegionsResult_Memory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadMemoryRegionsResult_Memory));
  AnalyzeExternalRefsRequest_descriptor_ = file->message_type(8);
  static const int AnalyzeExternalRefsRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsRequest, ea_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsRequest, ea_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsRequest, increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsRequest, analysing_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsRequest, analysing_size_),
  };
  AnalyzeExternalRefsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnalyzeExternalRefsRequest_descriptor_,
      AnalyzeExternalRefsRequest::default_instance_,
      AnalyzeExternalRefsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnalyzeExternalRefsRequest));
  AnalyzeExternalRefsResult_descriptor_ = file->message_type(9);
  static const int AnalyzeExternalRefsResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult, api_constants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult, refs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult, context_),
  };
  AnalyzeExternalRefsResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnalyzeExternalRefsResult_descriptor_,
      AnalyzeExternalRefsResult::default_instance_,
      AnalyzeExternalRefsResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnalyzeExternalRefsResult));
  AnalyzeExternalRefsResult_PointerData_descriptor_ = AnalyzeExternalRefsResult_descriptor_->nested_type(0);
  static const int AnalyzeExternalRefsResult_PointerData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_PointerData, ea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_PointerData, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_PointerData, proc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_PointerData, ordinal_collision_dll_path_),
  };
  AnalyzeExternalRefsResult_PointerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnalyzeExternalRefsResult_PointerData_descriptor_,
      AnalyzeExternalRefsResult_PointerData::default_instance_,
      AnalyzeExternalRefsResult_PointerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_PointerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_PointerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnalyzeExternalRefsResult_PointerData));
  AnalyzeExternalRefsResult_RefData_descriptor_ = AnalyzeExternalRefsResult_descriptor_->nested_type(1);
  static const int AnalyzeExternalRefsResult_RefData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_RefData, ea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_RefData, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_RefData, dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_RefData, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_RefData, ref_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_RefData, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_RefData, proc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_RefData, ordinal_collision_dll_path_),
  };
  AnalyzeExternalRefsResult_RefData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnalyzeExternalRefsResult_RefData_descriptor_,
      AnalyzeExternalRefsResult_RefData::default_instance_,
      AnalyzeExternalRefsResult_RefData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_RefData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_RefData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnalyzeExternalRefsResult_RefData));
  AnalyzeExternalRefsResult_RefData_RefType_descriptor_ = AnalyzeExternalRefsResult_RefData_descriptor_->enum_type(0);
  AnalyzeExternalRefsResult_reg_t_descriptor_ = AnalyzeExternalRefsResult_descriptor_->nested_type(2);
  static const int AnalyzeExternalRefsResult_reg_t_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, eax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, ecx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, edx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, ebx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, esp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, ebp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, esi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, edi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, rip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, rax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, rbx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, rcx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, rdx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, rsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, rdi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, rbp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, rsp_),
  };
  AnalyzeExternalRefsResult_reg_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnalyzeExternalRefsResult_reg_t_descriptor_,
      AnalyzeExternalRefsResult_reg_t::default_instance_,
      AnalyzeExternalRefsResult_reg_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeExternalRefsResult_reg_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnalyzeExternalRefsResult_reg_t));
  CheckPEHeadersRequest_descriptor_ = file->message_type(10);
  static const int CheckPEHeadersRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersRequest, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersRequest, size_),
  };
  CheckPEHeadersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckPEHeadersRequest_descriptor_,
      CheckPEHeadersRequest::default_instance_,
      CheckPEHeadersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckPEHeadersRequest));
  CheckPEHeadersResult_descriptor_ = file->message_type(11);
  static const int CheckPEHeadersResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult, pe_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult, exps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult, sections_),
  };
  CheckPEHeadersResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckPEHeadersResult_descriptor_,
      CheckPEHeadersResult::default_instance_,
      CheckPEHeadersResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckPEHeadersResult));
  CheckPEHeadersResult_Exports_descriptor_ = CheckPEHeadersResult_descriptor_->nested_type(0);
  static const int CheckPEHeadersResult_Exports_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Exports, ea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Exports, ord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Exports, name_),
  };
  CheckPEHeadersResult_Exports_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckPEHeadersResult_Exports_descriptor_,
      CheckPEHeadersResult_Exports::default_instance_,
      CheckPEHeadersResult_Exports_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Exports, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Exports, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckPEHeadersResult_Exports));
  CheckPEHeadersResult_Section_descriptor_ = CheckPEHeadersResult_descriptor_->nested_type(1);
  static const int CheckPEHeadersResult_Section_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Section, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Section, va_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Section, v_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Section, raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Section, raw_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Section, characteristics_),
  };
  CheckPEHeadersResult_Section_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckPEHeadersResult_Section_descriptor_,
      CheckPEHeadersResult_Section::default_instance_,
      CheckPEHeadersResult_Section_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Section, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPEHeadersResult_Section, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckPEHeadersResult_Section));
  GetBackendInfoResult_descriptor_ = file->message_type(12);
  static const int GetBackendInfoResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackendInfoResult, bitness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackendInfoResult, dbg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackendInfoResult, dbg_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackendInfoResult, labeless_ver_),
  };
  GetBackendInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBackendInfoResult_descriptor_,
      GetBackendInfoResult::default_instance_,
      GetBackendInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackendInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackendInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBackendInfoResult));
  AutoCompleteCodeRequest_descriptor_ = file->message_type(13);
  static const int AutoCompleteCodeRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeRequest, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeRequest, zline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeRequest, zcol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeRequest, call_sig_only_),
  };
  AutoCompleteCodeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoCompleteCodeRequest_descriptor_,
      AutoCompleteCodeRequest::default_instance_,
      AutoCompleteCodeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoCompleteCodeRequest));
  AutoCompleteCodeResult_descriptor_ = file->message_type(14);
  static const int AutoCompleteCodeResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult, completions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult, call_sigs_),
  };
  AutoCompleteCodeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoCompleteCodeResult_descriptor_,
      AutoCompleteCodeResult::default_instance_,
      AutoCompleteCodeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoCompleteCodeResult));
  AutoCompleteCodeResult_CallSignature_descriptor_ = AutoCompleteCodeResult_descriptor_->nested_type(0);
  static const int AutoCompleteCodeResult_CallSignature_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult_CallSignature, cs_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult_CallSignature, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult_CallSignature, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult_CallSignature, raw_doc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult_CallSignature, params_),
  };
  AutoCompleteCodeResult_CallSignature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoCompleteCodeResult_CallSignature_descriptor_,
      AutoCompleteCodeResult_CallSignature::default_instance_,
      AutoCompleteCodeResult_CallSignature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult_CallSignature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult_CallSignature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoCompleteCodeResult_CallSignature));
  AutoCompleteCodeResult_CallSignature_Param_descriptor_ = AutoCompleteCodeResult_CallSignature_descriptor_->nested_type(0);
  static const int AutoCompleteCodeResult_CallSignature_Param_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult_CallSignature_Param, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult_CallSignature_Param, description_),
  };
  AutoCompleteCodeResult_CallSignature_Param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoCompleteCodeResult_CallSignature_Param_descriptor_,
      AutoCompleteCodeResult_CallSignature_Param::default_instance_,
      AutoCompleteCodeResult_CallSignature_Param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult_CallSignature_Param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoCompleteCodeResult_CallSignature_Param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoCompleteCodeResult_CallSignature_Param));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcRequest_descriptor_, &RpcRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Execute_descriptor_, &Execute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeNamesRequest_descriptor_, &MakeNamesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeNamesRequest_Name_descriptor_, &MakeNamesRequest_Name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeCommentsRequest_descriptor_, &MakeCommentsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeCommentsRequest_Name_descriptor_, &MakeCommentsRequest_Name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMemoryMapResult_descriptor_, &GetMemoryMapResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMemoryMapResult_Memory_descriptor_, &GetMemoryMapResult_Memory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadMemoryRegionsRequest_descriptor_, &ReadMemoryRegionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadMemoryRegionsRequest_Region_descriptor_, &ReadMemoryRegionsRequest_Region::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadMemoryRegionsResult_descriptor_, &ReadMemoryRegionsResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadMemoryRegionsResult_Memory_descriptor_, &ReadMemoryRegionsResult_Memory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnalyzeExternalRefsRequest_descriptor_, &AnalyzeExternalRefsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnalyzeExternalRefsResult_descriptor_, &AnalyzeExternalRefsResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnalyzeExternalRefsResult_PointerData_descriptor_, &AnalyzeExternalRefsResult_PointerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnalyzeExternalRefsResult_RefData_descriptor_, &AnalyzeExternalRefsResult_RefData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnalyzeExternalRefsResult_reg_t_descriptor_, &AnalyzeExternalRefsResult_reg_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckPEHeadersRequest_descriptor_, &CheckPEHeadersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckPEHeadersResult_descriptor_, &CheckPEHeadersResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckPEHeadersResult_Exports_descriptor_, &CheckPEHeadersResult_Exports::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckPEHeadersResult_Section_descriptor_, &CheckPEHeadersResult_Section::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBackendInfoResult_descriptor_, &GetBackendInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoCompleteCodeRequest_descriptor_, &AutoCompleteCodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoCompleteCodeResult_descriptor_, &AutoCompleteCodeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoCompleteCodeResult_CallSignature_descriptor_, &AutoCompleteCodeResult_CallSignature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoCompleteCodeResult_CallSignature_Param_descriptor_, &AutoCompleteCodeResult_CallSignature_Param::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_2eproto() {
  delete RpcRequest::default_instance_;
  delete RpcRequest_reflection_;
  delete Execute::default_instance_;
  delete Execute_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete MakeNamesRequest::default_instance_;
  delete MakeNamesRequest_reflection_;
  delete MakeNamesRequest_Name::default_instance_;
  delete MakeNamesRequest_Name_reflection_;
  delete MakeCommentsRequest::default_instance_;
  delete MakeCommentsRequest_reflection_;
  delete MakeCommentsRequest_Name::default_instance_;
  delete MakeCommentsRequest_Name_reflection_;
  delete GetMemoryMapResult::default_instance_;
  delete GetMemoryMapResult_reflection_;
  delete GetMemoryMapResult_Memory::default_instance_;
  delete GetMemoryMapResult_Memory_reflection_;
  delete ReadMemoryRegionsRequest::default_instance_;
  delete ReadMemoryRegionsRequest_reflection_;
  delete ReadMemoryRegionsRequest_Region::default_instance_;
  delete ReadMemoryRegionsRequest_Region_reflection_;
  delete ReadMemoryRegionsResult::default_instance_;
  delete ReadMemoryRegionsResult_reflection_;
  delete ReadMemoryRegionsResult_Memory::default_instance_;
  delete ReadMemoryRegionsResult_Memory_reflection_;
  delete AnalyzeExternalRefsRequest::default_instance_;
  delete AnalyzeExternalRefsRequest_reflection_;
  delete AnalyzeExternalRefsResult::default_instance_;
  delete AnalyzeExternalRefsResult_reflection_;
  delete AnalyzeExternalRefsResult_PointerData::default_instance_;
  delete AnalyzeExternalRefsResult_PointerData_reflection_;
  delete AnalyzeExternalRefsResult_RefData::default_instance_;
  delete AnalyzeExternalRefsResult_RefData_reflection_;
  delete AnalyzeExternalRefsResult_reg_t::default_instance_;
  delete AnalyzeExternalRefsResult_reg_t_reflection_;
  delete CheckPEHeadersRequest::default_instance_;
  delete CheckPEHeadersRequest_reflection_;
  delete CheckPEHeadersResult::default_instance_;
  delete CheckPEHeadersResult_reflection_;
  delete CheckPEHeadersResult_Exports::default_instance_;
  delete CheckPEHeadersResult_Exports_reflection_;
  delete CheckPEHeadersResult_Section::default_instance_;
  delete CheckPEHeadersResult_Section_reflection_;
  delete GetBackendInfoResult::default_instance_;
  delete GetBackendInfoResult_reflection_;
  delete AutoCompleteCodeRequest::default_instance_;
  delete AutoCompleteCodeRequest_reflection_;
  delete AutoCompleteCodeResult::default_instance_;
  delete AutoCompleteCodeResult_reflection_;
  delete AutoCompleteCodeResult_CallSignature::default_instance_;
  delete AutoCompleteCodeResult_CallSignature_reflection_;
  delete AutoCompleteCodeResult_CallSignature_Param::default_instance_;
  delete AutoCompleteCodeResult_CallSignature_Param_reflection_;
}

void protobuf_AddDesc_rpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\trpc.proto\022\003rpc\"\230\005\n\nRpcRequest\0221\n\014reque"
    "st_type\030\001 \002(\0162\033.rpc.RpcRequest.RequestTy"
    "pe\022-\n\016make_names_req\030\002 \001(\0132\025.rpc.MakeNam"
    "esRequest\0223\n\021make_comments_req\030\003 \001(\0132\030.r"
    "pc.MakeCommentsRequest\022>\n\027read_memory_re"
    "gions_req\030\004 \001(\0132\035.rpc.ReadMemoryRegionsR"
    "equest\022B\n\031analyze_external_refs_req\030\005 \001("
    "\0132\037.rpc.AnalyzeExternalRefsRequest\0228\n\024ch"
    "eck_pe_headers_req\030\006 \001(\0132\032.rpc.CheckPEHe"
    "adersRequest\022<\n\026auto_complete_code_req\030\007"
    " \001(\0132\034.rpc.AutoCompleteCodeRequest\"\366\001\n\013R"
    "equestType\022\020\n\014RPCT_UNKNOWN\020\000\022\023\n\017RPCT_MAK"
    "E_NAMES\020\001\022\026\n\022RPCT_MAKE_COMMENTS\020\002\022\027\n\023RPC"
    "T_GET_MEMORY_MAP\020\003\022\034\n\030RPCT_READ_MEMORY_R"
    "EGIONS\020\004\022\036\n\032RPCT_ANALYZE_EXTERNAL_REFS\020\005"
    "\022\031\n\025RPCT_CHECK_PE_HEADERS\020\006\022\031\n\025RPCT_GET_"
    "BACKEND_INFO\020\007\022\033\n\027RPCT_AUTO_COMPLETE_COD"
    "E\020\010\"t\n\007Execute\022\016\n\006script\030\001 \001(\t\022\031\n\021script"
    "_extern_obj\030\002 \001(\t\022\023\n\013rpc_request\030\003 \001(\014\022\031"
    "\n\nbackground\030\004 \001(\010:\005false\022\016\n\006job_id\030\005 \001("
    "\004\"\325\001\n\010Response\022\016\n\006job_id\030\001 \002(\004\022\017\n\007std_ou"
    "t\030\002 \001(\t\022\017\n\007std_err\030\003 \001(\t\022\r\n\005error\030\004 \001(\t\022"
    "\022\n\nrpc_result\030\005 \001(\014\022+\n\njob_status\030\006 \001(\0162"
    "\027.rpc.Response.JobStatus\022\031\n\021script_resul"
    "t_obj\030\007 \001(\t\",\n\tJobStatus\022\017\n\013JS_FINISHED\020"
    "\001\022\016\n\nJS_PENDING\020\002\"\202\001\n\020MakeNamesRequest\022)"
    "\n\005names\030\001 \003(\0132\032.rpc.MakeNamesRequest.Nam"
    "e\022\014\n\004base\030\002 \002(\004\022\023\n\013remote_base\030\003 \002(\004\032 \n\004"
    "Name\022\n\n\002ea\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\"\210\001\n\023MakeC"
    "ommentsRequest\022,\n\005names\030\001 \003(\0132\035.rpc.Make"
    "CommentsRequest.Name\022\014\n\004base\030\002 \002(\004\022\023\n\013re"
    "mote_base\030\003 \002(\004\032 \n\004Name\022\n\n\002ea\030\001 \002(\004\022\014\n\004n"
    "ame\030\002 \002(\t\"\212\001\n\022GetMemoryMapResult\0220\n\010memo"
    "ries\030\001 \003(\0132\036.rpc.GetMemoryMapResult.Memo"
    "ry\032B\n\006Memory\022\014\n\004base\030\001 \002(\004\022\014\n\004size\030\002 \002(\004"
    "\022\016\n\006access\030\003 \002(\r\022\014\n\004name\030\004 \002(\t\"w\n\030ReadMe"
    "moryRegionsRequest\0225\n\007regions\030\001 \003(\0132$.rp"
    "c.ReadMemoryRegionsRequest.Region\032$\n\006Reg"
    "ion\022\014\n\004addr\030\001 \002(\004\022\014\n\004size\030\002 \002(\004\"\224\001\n\027Read"
    "MemoryRegionsResult\0225\n\010memories\030\001 \003(\0132#."
    "rpc.ReadMemoryRegionsResult.Memory\032B\n\006Me"
    "mory\022\014\n\004addr\030\001 \002(\004\022\014\n\004size\030\002 \002(\004\022\013\n\003mem\030"
    "\003 \002(\014\022\017\n\007protect\030\004 \002(\r\"\177\n\032AnalyzeExterna"
    "lRefsRequest\022\017\n\007ea_from\030\001 \002(\004\022\r\n\005ea_to\030\002"
    " \002(\004\022\021\n\tincrement\030\003 \002(\r\022\026\n\016analysing_bas"
    "e\030\004 \002(\004\022\026\n\016analysing_size\030\005 \002(\004\"\225\006\n\031Anal"
    "yzeExternalRefsResult\022A\n\rapi_constants\030\001"
    " \003(\0132*.rpc.AnalyzeExternalRefsResult.Poi"
    "nterData\0224\n\004refs\030\002 \003(\0132&.rpc.AnalyzeExte"
    "rnalRefsResult.RefData\0225\n\007context\030\003 \002(\0132"
    "$.rpc.AnalyzeExternalRefsResult.reg_t\032[\n"
    "\013PointerData\022\n\n\002ea\030\001 \002(\004\022\016\n\006module\030\002 \002(\t"
    "\022\014\n\004proc\030\003 \002(\t\022\"\n\032ordinal_collision_dll_"
    "path\030\004 \001(\t\032\203\002\n\007RefData\022\n\n\002ea\030\001 \002(\004\022\013\n\003le"
    "n\030\002 \002(\004\022\013\n\003dis\030\003 \002(\t\022\t\n\001v\030\004 \002(\004\022@\n\010ref_t"
    "ype\030\005 \002(\0162..rpc.AnalyzeExternalRefsResul"
    "t.RefData.RefType\022\016\n\006module\030\006 \002(\t\022\014\n\004pro"
    "c\030\007 \002(\t\022\"\n\032ordinal_collision_dll_path\030\010 "
    "\001(\t\"C\n\007RefType\022\021\n\rREFT_JMPCONST\020\001\022\021\n\rREF"
    "T_IMMCONST\020\002\022\022\n\016REFT_ADDRCONST\020\003\032\344\001\n\005reg"
    "_t\022\013\n\003eax\030\001 \002(\r\022\013\n\003ecx\030\002 \002(\r\022\013\n\003edx\030\003 \002("
    "\r\022\013\n\003ebx\030\004 \002(\r\022\013\n\003esp\030\005 \002(\r\022\013\n\003ebp\030\006 \002(\r"
    "\022\013\n\003esi\030\007 \002(\r\022\013\n\003edi\030\010 \002(\r\022\013\n\003rip\030\t \002(\004\022"
    "\013\n\003rax\030\n \001(\004\022\013\n\003rbx\030\013 \001(\004\022\013\n\003rcx\030\014 \001(\004\022\013"
    "\n\003rdx\030\r \001(\004\022\013\n\003rsi\030\016 \001(\004\022\013\n\003rdi\030\017 \001(\004\022\013\n"
    "\003rbp\030\020 \001(\004\022\013\n\003rsp\030\021 \001(\004\"3\n\025CheckPEHeader"
    "sRequest\022\014\n\004base\030\001 \002(\004\022\014\n\004size\030\002 \002(\004\"\255\002\n"
    "\024CheckPEHeadersResult\022\020\n\010pe_valid\030\001 \002(\010\022"
    "/\n\004exps\030\002 \003(\0132!.rpc.CheckPEHeadersResult"
    ".Exports\0223\n\010sections\030\003 \003(\0132!.rpc.CheckPE"
    "HeadersResult.Section\0320\n\007Exports\022\n\n\002ea\030\001"
    " \002(\004\022\013\n\003ord\030\002 \002(\004\022\014\n\004name\030\003 \001(\t\032k\n\007Secti"
    "on\022\014\n\004name\030\001 \001(\t\022\n\n\002va\030\002 \001(\004\022\016\n\006v_size\030\003"
    " \001(\004\022\013\n\003raw\030\004 \001(\004\022\020\n\010raw_size\030\005 \001(\004\022\027\n\017c"
    "haracteristics\030\006 \001(\r\"`\n\024GetBackendInfoRe"
    "sult\022\017\n\007bitness\030\001 \002(\r\022\020\n\010dbg_name\030\002 \002(\t\022"
    "\017\n\007dbg_ver\030\003 \001(\t\022\024\n\014labeless_ver\030\004 \002(\t\"]"
    "\n\027AutoCompleteCodeRequest\022\016\n\006source\030\001 \002("
    "\t\022\r\n\005zline\030\002 \002(\r\022\014\n\004zcol\030\003 \002(\r\022\025\n\rcall_s"
    "ig_only\030\004 \002(\010\"\251\002\n\026AutoCompleteCodeResult"
    "\022\023\n\013completions\030\001 \003(\t\022<\n\tcall_sigs\030\002 \003(\013"
    "2).rpc.AutoCompleteCodeResult.CallSignat"
    "ure\032\273\001\n\rCallSignature\022\017\n\007cs_type\030\001 \001(\t\022\014"
    "\n\004name\030\002 \002(\t\022\r\n\005index\030\003 \002(\005\022\017\n\007raw_doc\030\004"
    " \001(\t\022\?\n\006params\030\005 \003(\0132/.rpc.AutoCompleteC"
    "odeResult.CallSignature.Param\032*\n\005Param\022\014"
    "\n\004name\030\001 \002(\t\022\023\n\013description\030\002 \001(\t", 3473);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc.proto", &protobuf_RegisterTypes);
  RpcRequest::default_instance_ = new RpcRequest();
  Execute::default_instance_ = new Execute();
  Response::default_instance_ = new Response();
  MakeNamesRequest::default_instance_ = new MakeNamesRequest();
  MakeNamesRequest_Name::default_instance_ = new MakeNamesRequest_Name();
  MakeCommentsRequest::default_instance_ = new MakeCommentsRequest();
  MakeCommentsRequest_Name::default_instance_ = new MakeCommentsRequest_Name();
  GetMemoryMapResult::default_instance_ = new GetMemoryMapResult();
  GetMemoryMapResult_Memory::default_instance_ = new GetMemoryMapResult_Memory();
  ReadMemoryRegionsRequest::default_instance_ = new ReadMemoryRegionsRequest();
  ReadMemoryRegionsRequest_Region::default_instance_ = new ReadMemoryRegionsRequest_Region();
  ReadMemoryRegionsResult::default_instance_ = new ReadMemoryRegionsResult();
  ReadMemoryRegionsResult_Memory::default_instance_ = new ReadMemoryRegionsResult_Memory();
  AnalyzeExternalRefsRequest::default_instance_ = new AnalyzeExternalRefsRequest();
  AnalyzeExternalRefsResult::default_instance_ = new AnalyzeExternalRefsResult();
  AnalyzeExternalRefsResult_PointerData::default_instance_ = new AnalyzeExternalRefsResult_PointerData();
  AnalyzeExternalRefsResult_RefData::default_instance_ = new AnalyzeExternalRefsResult_RefData();
  AnalyzeExternalRefsResult_reg_t::default_instance_ = new AnalyzeExternalRefsResult_reg_t();
  CheckPEHeadersRequest::default_instance_ = new CheckPEHeadersRequest();
  CheckPEHeadersResult::default_instance_ = new CheckPEHeadersResult();
  CheckPEHeadersResult_Exports::default_instance_ = new CheckPEHeadersResult_Exports();
  CheckPEHeadersResult_Section::default_instance_ = new CheckPEHeadersResult_Section();
  GetBackendInfoResult::default_instance_ = new GetBackendInfoResult();
  AutoCompleteCodeRequest::default_instance_ = new AutoCompleteCodeRequest();
  AutoCompleteCodeResult::default_instance_ = new AutoCompleteCodeResult();
  AutoCompleteCodeResult_CallSignature::default_instance_ = new AutoCompleteCodeResult_CallSignature();
  AutoCompleteCodeResult_CallSignature_Param::default_instance_ = new AutoCompleteCodeResult_CallSignature_Param();
  RpcRequest::default_instance_->InitAsDefaultInstance();
  Execute::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  MakeNamesRequest::default_instance_->InitAsDefaultInstance();
  MakeNamesRequest_Name::default_instance_->InitAsDefaultInstance();
  MakeCommentsRequest::default_instance_->InitAsDefaultInstance();
  MakeCommentsRequest_Name::default_instance_->InitAsDefaultInstance();
  GetMemoryMapResult::default_instance_->InitAsDefaultInstance();
  GetMemoryMapResult_Memory::default_instance_->InitAsDefaultInstance();
  ReadMemoryRegionsRequest::default_instance_->InitAsDefaultInstance();
  ReadMemoryRegionsRequest_Region::default_instance_->InitAsDefaultInstance();
  ReadMemoryRegionsResult::default_instance_->InitAsDefaultInstance();
  ReadMemoryRegionsResult_Memory::default_instance_->InitAsDefaultInstance();
  AnalyzeExternalRefsRequest::default_instance_->InitAsDefaultInstance();
  AnalyzeExternalRefsResult::default_instance_->InitAsDefaultInstance();
  AnalyzeExternalRefsResult_PointerData::default_instance_->InitAsDefaultInstance();
  AnalyzeExternalRefsResult_RefData::default_instance_->InitAsDefaultInstance();
  AnalyzeExternalRefsResult_reg_t::default_instance_->InitAsDefaultInstance();
  CheckPEHeadersRequest::default_instance_->InitAsDefaultInstance();
  CheckPEHeadersResult::default_instance_->InitAsDefaultInstance();
  CheckPEHeadersResult_Exports::default_instance_->InitAsDefaultInstance();
  CheckPEHeadersResult_Section::default_instance_->InitAsDefaultInstance();
  GetBackendInfoResult::default_instance_->InitAsDefaultInstance();
  AutoCompleteCodeRequest::default_instance_->InitAsDefaultInstance();
  AutoCompleteCodeResult::default_instance_->InitAsDefaultInstance();
  AutoCompleteCodeResult_CallSignature::default_instance_->InitAsDefaultInstance();
  AutoCompleteCodeResult_CallSignature_Param::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_2eproto {
  StaticDescriptorInitializer_rpc_2eproto() {
    protobuf_AddDesc_rpc_2eproto();
  }
} static_descriptor_initializer_rpc_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RpcRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcRequest_RequestType_descriptor_;
}
bool RpcRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RpcRequest_RequestType RpcRequest::RPCT_UNKNOWN;
const RpcRequest_RequestType RpcRequest::RPCT_MAKE_NAMES;
const RpcRequest_RequestType RpcRequest::RPCT_MAKE_COMMENTS;
const RpcRequest_RequestType RpcRequest::RPCT_GET_MEMORY_MAP;
const RpcRequest_RequestType RpcRequest::RPCT_READ_MEMORY_REGIONS;
const RpcRequest_RequestType RpcRequest::RPCT_ANALYZE_EXTERNAL_REFS;
const RpcRequest_RequestType RpcRequest::RPCT_CHECK_PE_HEADERS;
const RpcRequest_RequestType RpcRequest::RPCT_GET_BACKEND_INFO;
const RpcRequest_RequestType RpcRequest::RPCT_AUTO_COMPLETE_CODE;
const RpcRequest_RequestType RpcRequest::RequestType_MIN;
const RpcRequest_RequestType RpcRequest::RequestType_MAX;
const int RpcRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RpcRequest::kRequestTypeFieldNumber;
const int RpcRequest::kMakeNamesReqFieldNumber;
const int RpcRequest::kMakeCommentsReqFieldNumber;
const int RpcRequest::kReadMemoryRegionsReqFieldNumber;
const int RpcRequest::kAnalyzeExternalRefsReqFieldNumber;
const int RpcRequest::kCheckPeHeadersReqFieldNumber;
const int RpcRequest::kAutoCompleteCodeReqFieldNumber;
#endif  // !_MSC_VER

RpcRequest::RpcRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.RpcRequest)
}

void RpcRequest::InitAsDefaultInstance() {
  make_names_req_ = const_cast< ::rpc::MakeNamesRequest*>(&::rpc::MakeNamesRequest::default_instance());
  make_comments_req_ = const_cast< ::rpc::MakeCommentsRequest*>(&::rpc::MakeCommentsRequest::default_instance());
  read_memory_regions_req_ = const_cast< ::rpc::ReadMemoryRegionsRequest*>(&::rpc::ReadMemoryRegionsRequest::default_instance());
  analyze_external_refs_req_ = const_cast< ::rpc::AnalyzeExternalRefsRequest*>(&::rpc::AnalyzeExternalRefsRequest::default_instance());
  check_pe_headers_req_ = const_cast< ::rpc::CheckPEHeadersRequest*>(&::rpc::CheckPEHeadersRequest::default_instance());
  auto_complete_code_req_ = const_cast< ::rpc::AutoCompleteCodeRequest*>(&::rpc::AutoCompleteCodeRequest::default_instance());
}

RpcRequest::RpcRequest(const RpcRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.RpcRequest)
}

void RpcRequest::SharedCtor() {
  _cached_size_ = 0;
  request_type_ = 0;
  make_names_req_ = NULL;
  make_comments_req_ = NULL;
  read_memory_regions_req_ = NULL;
  analyze_external_refs_req_ = NULL;
  check_pe_headers_req_ = NULL;
  auto_complete_code_req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcRequest::~RpcRequest() {
  // @@protoc_insertion_point(destructor:rpc.RpcRequest)
  SharedDtor();
}

void RpcRequest::SharedDtor() {
  if (this != default_instance_) {
    delete make_names_req_;
    delete make_comments_req_;
    delete read_memory_regions_req_;
    delete analyze_external_refs_req_;
    delete check_pe_headers_req_;
    delete auto_complete_code_req_;
  }
}

void RpcRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcRequest_descriptor_;
}

const RpcRequest& RpcRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

RpcRequest* RpcRequest::default_instance_ = NULL;

RpcRequest* RpcRequest::New() const {
  return new RpcRequest;
}

void RpcRequest::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    request_type_ = 0;
    if (has_make_names_req()) {
      if (make_names_req_ != NULL) make_names_req_->::rpc::MakeNamesRequest::Clear();
    }
    if (has_make_comments_req()) {
      if (make_comments_req_ != NULL) make_comments_req_->::rpc::MakeCommentsRequest::Clear();
    }
    if (has_read_memory_regions_req()) {
      if (read_memory_regions_req_ != NULL) read_memory_regions_req_->::rpc::ReadMemoryRegionsRequest::Clear();
    }
    if (has_analyze_external_refs_req()) {
      if (analyze_external_refs_req_ != NULL) analyze_external_refs_req_->::rpc::AnalyzeExternalRefsRequest::Clear();
    }
    if (has_check_pe_headers_req()) {
      if (check_pe_headers_req_ != NULL) check_pe_headers_req_->::rpc::CheckPEHeadersRequest::Clear();
    }
    if (has_auto_complete_code_req()) {
      if (auto_complete_code_req_ != NULL) auto_complete_code_req_->::rpc::AutoCompleteCodeRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.RpcRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rpc.RpcRequest.RequestType request_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rpc::RpcRequest_RequestType_IsValid(value)) {
            set_request_type(static_cast< ::rpc::RpcRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_make_names_req;
        break;
      }

      // optional .rpc.MakeNamesRequest make_names_req = 2;
      case 2: {
        if (tag == 18) {
         parse_make_names_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_make_names_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_make_comments_req;
        break;
      }

      // optional .rpc.MakeCommentsRequest make_comments_req = 3;
      case 3: {
        if (tag == 26) {
         parse_make_comments_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_make_comments_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_read_memory_regions_req;
        break;
      }

      // optional .rpc.ReadMemoryRegionsRequest read_memory_regions_req = 4;
      case 4: {
        if (tag == 34) {
         parse_read_memory_regions_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_memory_regions_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_analyze_external_refs_req;
        break;
      }

      // optional .rpc.AnalyzeExternalRefsRequest analyze_external_refs_req = 5;
      case 5: {
        if (tag == 42) {
         parse_analyze_external_refs_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_analyze_external_refs_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_check_pe_headers_req;
        break;
      }

      // optional .rpc.CheckPEHeadersRequest check_pe_headers_req = 6;
      case 6: {
        if (tag == 50) {
         parse_check_pe_headers_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_pe_headers_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_auto_complete_code_req;
        break;
      }

      // optional .rpc.AutoCompleteCodeRequest auto_complete_code_req = 7;
      case 7: {
        if (tag == 58) {
         parse_auto_complete_code_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_complete_code_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.RpcRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.RpcRequest)
  return false;
#undef DO_
}

void RpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.RpcRequest)
  // required .rpc.RpcRequest.RequestType request_type = 1;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request_type(), output);
  }

  // optional .rpc.MakeNamesRequest make_names_req = 2;
  if (has_make_names_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->make_names_req(), output);
  }

  // optional .rpc.MakeCommentsRequest make_comments_req = 3;
  if (has_make_comments_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->make_comments_req(), output);
  }

  // optional .rpc.ReadMemoryRegionsRequest read_memory_regions_req = 4;
  if (has_read_memory_regions_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->read_memory_regions_req(), output);
  }

  // optional .rpc.AnalyzeExternalRefsRequest analyze_external_refs_req = 5;
  if (has_analyze_external_refs_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->analyze_external_refs_req(), output);
  }

  // optional .rpc.CheckPEHeadersRequest check_pe_headers_req = 6;
  if (has_check_pe_headers_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->check_pe_headers_req(), output);
  }

  // optional .rpc.AutoCompleteCodeRequest auto_complete_code_req = 7;
  if (has_auto_complete_code_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->auto_complete_code_req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.RpcRequest)
}

::google::protobuf::uint8* RpcRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.RpcRequest)
  // required .rpc.RpcRequest.RequestType request_type = 1;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->request_type(), target);
  }

  // optional .rpc.MakeNamesRequest make_names_req = 2;
  if (has_make_names_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->make_names_req(), target);
  }

  // optional .rpc.MakeCommentsRequest make_comments_req = 3;
  if (has_make_comments_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->make_comments_req(), target);
  }

  // optional .rpc.ReadMemoryRegionsRequest read_memory_regions_req = 4;
  if (has_read_memory_regions_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->read_memory_regions_req(), target);
  }

  // optional .rpc.AnalyzeExternalRefsRequest analyze_external_refs_req = 5;
  if (has_analyze_external_refs_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->analyze_external_refs_req(), target);
  }

  // optional .rpc.CheckPEHeadersRequest check_pe_headers_req = 6;
  if (has_check_pe_headers_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->check_pe_headers_req(), target);
  }

  // optional .rpc.AutoCompleteCodeRequest auto_complete_code_req = 7;
  if (has_auto_complete_code_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->auto_complete_code_req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.RpcRequest)
  return target;
}

int RpcRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpc.RpcRequest.RequestType request_type = 1;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
    }

    // optional .rpc.MakeNamesRequest make_names_req = 2;
    if (has_make_names_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->make_names_req());
    }

    // optional .rpc.MakeCommentsRequest make_comments_req = 3;
    if (has_make_comments_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->make_comments_req());
    }

    // optional .rpc.ReadMemoryRegionsRequest read_memory_regions_req = 4;
    if (has_read_memory_regions_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_memory_regions_req());
    }

    // optional .rpc.AnalyzeExternalRefsRequest analyze_external_refs_req = 5;
    if (has_analyze_external_refs_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->analyze_external_refs_req());
    }

    // optional .rpc.CheckPEHeadersRequest check_pe_headers_req = 6;
    if (has_check_pe_headers_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_pe_headers_req());
    }

    // optional .rpc.AutoCompleteCodeRequest auto_complete_code_req = 7;
    if (has_auto_complete_code_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auto_complete_code_req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcRequest::MergeFrom(const RpcRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_make_names_req()) {
      mutable_make_names_req()->::rpc::MakeNamesRequest::MergeFrom(from.make_names_req());
    }
    if (from.has_make_comments_req()) {
      mutable_make_comments_req()->::rpc::MakeCommentsRequest::MergeFrom(from.make_comments_req());
    }
    if (from.has_read_memory_regions_req()) {
      mutable_read_memory_regions_req()->::rpc::ReadMemoryRegionsRequest::MergeFrom(from.read_memory_regions_req());
    }
    if (from.has_analyze_external_refs_req()) {
      mutable_analyze_external_refs_req()->::rpc::AnalyzeExternalRefsRequest::MergeFrom(from.analyze_external_refs_req());
    }
    if (from.has_check_pe_headers_req()) {
      mutable_check_pe_headers_req()->::rpc::CheckPEHeadersRequest::MergeFrom(from.check_pe_headers_req());
    }
    if (from.has_auto_complete_code_req()) {
      mutable_auto_complete_code_req()->::rpc::AutoCompleteCodeRequest::MergeFrom(from.auto_complete_code_req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcRequest::CopyFrom(const RpcRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_make_names_req()) {
    if (!this->make_names_req().IsInitialized()) return false;
  }
  if (has_make_comments_req()) {
    if (!this->make_comments_req().IsInitialized()) return false;
  }
  if (has_read_memory_regions_req()) {
    if (!this->read_memory_regions_req().IsInitialized()) return false;
  }
  if (has_analyze_external_refs_req()) {
    if (!this->analyze_external_refs_req().IsInitialized()) return false;
  }
  if (has_check_pe_headers_req()) {
    if (!this->check_pe_headers_req().IsInitialized()) return false;
  }
  if (has_auto_complete_code_req()) {
    if (!this->auto_complete_code_req().IsInitialized()) return false;
  }
  return true;
}

void RpcRequest::Swap(RpcRequest* other) {
  if (other != this) {
    std::swap(request_type_, other->request_type_);
    std::swap(make_names_req_, other->make_names_req_);
    std::swap(make_comments_req_, other->make_comments_req_);
    std::swap(read_memory_regions_req_, other->read_memory_regions_req_);
    std::swap(analyze_external_refs_req_, other->analyze_external_refs_req_);
    std::swap(check_pe_headers_req_, other->check_pe_headers_req_);
    std::swap(auto_complete_code_req_, other->auto_complete_code_req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcRequest_descriptor_;
  metadata.reflection = RpcRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Execute::kScriptFieldNumber;
const int Execute::kScriptExternObjFieldNumber;
const int Execute::kRpcRequestFieldNumber;
const int Execute::kBackgroundFieldNumber;
const int Execute::kJobIdFieldNumber;
#endif  // !_MSC_VER

Execute::Execute()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.Execute)
}

void Execute::InitAsDefaultInstance() {
}

Execute::Execute(const Execute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.Execute)
}

void Execute::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_extern_obj_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  background_ = false;
  job_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Execute::~Execute() {
  // @@protoc_insertion_point(destructor:rpc.Execute)
  SharedDtor();
}

void Execute::SharedDtor() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (script_extern_obj_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_extern_obj_;
  }
  if (rpc_request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rpc_request_;
  }
  if (this != default_instance_) {
  }
}

void Execute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Execute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Execute_descriptor_;
}

const Execute& Execute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

Execute* Execute::default_instance_ = NULL;

Execute* Execute::New() const {
  return new Execute;
}

void Execute::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Execute*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(job_id_, background_);
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_->clear();
      }
    }
    if (has_script_extern_obj()) {
      if (script_extern_obj_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_extern_obj_->clear();
      }
    }
    if (has_rpc_request()) {
      if (rpc_request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rpc_request_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Execute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.Execute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string script = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "script");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_script_extern_obj;
        break;
      }

      // optional string script_extern_obj = 2;
      case 2: {
        if (tag == 18) {
         parse_script_extern_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script_extern_obj()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->script_extern_obj().data(), this->script_extern_obj().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "script_extern_obj");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rpc_request;
        break;
      }

      // optional bytes rpc_request = 3;
      case 3: {
        if (tag == 26) {
         parse_rpc_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rpc_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_background;
        break;
      }

      // optional bool background = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_background:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &background_)));
          set_has_background();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_job_id;
        break;
      }

      // optional uint64 job_id = 5;
      case 5: {
        if (tag == 40) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.Execute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.Execute)
  return false;
#undef DO_
}

void Execute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.Execute)
  // optional string script = 1;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "script");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->script(), output);
  }

  // optional string script_extern_obj = 2;
  if (has_script_extern_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script_extern_obj().data(), this->script_extern_obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "script_extern_obj");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->script_extern_obj(), output);
  }

  // optional bytes rpc_request = 3;
  if (has_rpc_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->rpc_request(), output);
  }

  // optional bool background = 4 [default = false];
  if (has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->background(), output);
  }

  // optional uint64 job_id = 5;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->job_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.Execute)
}

::google::protobuf::uint8* Execute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.Execute)
  // optional string script = 1;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "script");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->script(), target);
  }

  // optional string script_extern_obj = 2;
  if (has_script_extern_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script_extern_obj().data(), this->script_extern_obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "script_extern_obj");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->script_extern_obj(), target);
  }

  // optional bytes rpc_request = 3;
  if (has_rpc_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->rpc_request(), target);
  }

  // optional bool background = 4 [default = false];
  if (has_background()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->background(), target);
  }

  // optional uint64 job_id = 5;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->job_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.Execute)
  return target;
}

int Execute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string script = 1;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }

    // optional string script_extern_obj = 2;
    if (has_script_extern_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script_extern_obj());
    }

    // optional bytes rpc_request = 3;
    if (has_rpc_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rpc_request());
    }

    // optional bool background = 4 [default = false];
    if (has_background()) {
      total_size += 1 + 1;
    }

    // optional uint64 job_id = 5;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->job_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Execute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Execute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Execute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Execute::MergeFrom(const Execute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_script_extern_obj()) {
      set_script_extern_obj(from.script_extern_obj());
    }
    if (from.has_rpc_request()) {
      set_rpc_request(from.rpc_request());
    }
    if (from.has_background()) {
      set_background(from.background());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Execute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Execute::CopyFrom(const Execute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Execute::IsInitialized() const {

  return true;
}

void Execute::Swap(Execute* other) {
  if (other != this) {
    std::swap(script_, other->script_);
    std::swap(script_extern_obj_, other->script_extern_obj_);
    std::swap(rpc_request_, other->rpc_request_);
    std::swap(background_, other->background_);
    std::swap(job_id_, other->job_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Execute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Execute_descriptor_;
  metadata.reflection = Execute_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Response_JobStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_JobStatus_descriptor_;
}
bool Response_JobStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Response_JobStatus Response::JS_FINISHED;
const Response_JobStatus Response::JS_PENDING;
const Response_JobStatus Response::JobStatus_MIN;
const Response_JobStatus Response::JobStatus_MAX;
const int Response::JobStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Response::kJobIdFieldNumber;
const int Response::kStdOutFieldNumber;
const int Response::kStdErrFieldNumber;
const int Response::kErrorFieldNumber;
const int Response::kRpcResultFieldNumber;
const int Response::kJobStatusFieldNumber;
const int Response::kScriptResultObjFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  job_id_ = GOOGLE_ULONGLONG(0);
  std_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  std_err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpc_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_status_ = 1;
  script_result_obj_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:rpc.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (std_out_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete std_out_;
  }
  if (std_err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete std_err_;
  }
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (rpc_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rpc_result_;
  }
  if (script_result_obj_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_result_obj_;
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    job_id_ = GOOGLE_ULONGLONG(0);
    if (has_std_out()) {
      if (std_out_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        std_out_->clear();
      }
    }
    if (has_std_err()) {
      if (std_err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        std_err_->clear();
      }
    }
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
    if (has_rpc_result()) {
      if (rpc_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rpc_result_->clear();
      }
    }
    job_status_ = 1;
    if (has_script_result_obj()) {
      if (script_result_obj_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_result_obj_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 job_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_std_out;
        break;
      }

      // optional string std_out = 2;
      case 2: {
        if (tag == 18) {
         parse_std_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_std_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->std_out().data(), this->std_out().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "std_out");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_std_err;
        break;
      }

      // optional string std_err = 3;
      case 3: {
        if (tag == 26) {
         parse_std_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_std_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->std_err().data(), this->std_err().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "std_err");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional string error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rpc_result;
        break;
      }

      // optional bytes rpc_result = 5;
      case 5: {
        if (tag == 42) {
         parse_rpc_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rpc_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_job_status;
        break;
      }

      // optional .rpc.Response.JobStatus job_status = 6;
      case 6: {
        if (tag == 48) {
         parse_job_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rpc::Response_JobStatus_IsValid(value)) {
            set_job_status(static_cast< ::rpc::Response_JobStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_script_result_obj;
        break;
      }

      // optional string script_result_obj = 7;
      case 7: {
        if (tag == 58) {
         parse_script_result_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script_result_obj()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->script_result_obj().data(), this->script_result_obj().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "script_result_obj");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.Response)
  // required uint64 job_id = 1;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->job_id(), output);
  }

  // optional string std_out = 2;
  if (has_std_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->std_out().data(), this->std_out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "std_out");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->std_out(), output);
  }

  // optional string std_err = 3;
  if (has_std_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->std_err().data(), this->std_err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "std_err");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->std_err(), output);
  }

  // optional string error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error(), output);
  }

  // optional bytes rpc_result = 5;
  if (has_rpc_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->rpc_result(), output);
  }

  // optional .rpc.Response.JobStatus job_status = 6;
  if (has_job_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->job_status(), output);
  }

  // optional string script_result_obj = 7;
  if (has_script_result_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script_result_obj().data(), this->script_result_obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "script_result_obj");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->script_result_obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.Response)
  // required uint64 job_id = 1;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->job_id(), target);
  }

  // optional string std_out = 2;
  if (has_std_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->std_out().data(), this->std_out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "std_out");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->std_out(), target);
  }

  // optional string std_err = 3;
  if (has_std_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->std_err().data(), this->std_err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "std_err");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->std_err(), target);
  }

  // optional string error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }

  // optional bytes rpc_result = 5;
  if (has_rpc_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->rpc_result(), target);
  }

  // optional .rpc.Response.JobStatus job_status = 6;
  if (has_job_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->job_status(), target);
  }

  // optional string script_result_obj = 7;
  if (has_script_result_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script_result_obj().data(), this->script_result_obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "script_result_obj");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->script_result_obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 job_id = 1;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->job_id());
    }

    // optional string std_out = 2;
    if (has_std_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->std_out());
    }

    // optional string std_err = 3;
    if (has_std_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->std_err());
    }

    // optional string error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional bytes rpc_result = 5;
    if (has_rpc_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rpc_result());
    }

    // optional .rpc.Response.JobStatus job_status = 6;
    if (has_job_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_status());
    }

    // optional string script_result_obj = 7;
    if (has_script_result_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script_result_obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_std_out()) {
      set_std_out(from.std_out());
    }
    if (from.has_std_err()) {
      set_std_err(from.std_err());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_rpc_result()) {
      set_rpc_result(from.rpc_result());
    }
    if (from.has_job_status()) {
      set_job_status(from.job_status());
    }
    if (from.has_script_result_obj()) {
      set_script_result_obj(from.script_result_obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(job_id_, other->job_id_);
    std::swap(std_out_, other->std_out_);
    std::swap(std_err_, other->std_err_);
    std::swap(error_, other->error_);
    std::swap(rpc_result_, other->rpc_result_);
    std::swap(job_status_, other->job_status_);
    std::swap(script_result_obj_, other->script_result_obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakeNamesRequest_Name::kEaFieldNumber;
const int MakeNamesRequest_Name::kNameFieldNumber;
#endif  // !_MSC_VER

MakeNamesRequest_Name::MakeNamesRequest_Name()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.MakeNamesRequest.Name)
}

void MakeNamesRequest_Name::InitAsDefaultInstance() {
}

MakeNamesRequest_Name::MakeNamesRequest_Name(const MakeNamesRequest_Name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.MakeNamesRequest.Name)
}

void MakeNamesRequest_Name::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ea_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeNamesRequest_Name::~MakeNamesRequest_Name() {
  // @@protoc_insertion_point(destructor:rpc.MakeNamesRequest.Name)
  SharedDtor();
}

void MakeNamesRequest_Name::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MakeNamesRequest_Name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeNamesRequest_Name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeNamesRequest_Name_descriptor_;
}

const MakeNamesRequest_Name& MakeNamesRequest_Name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

MakeNamesRequest_Name* MakeNamesRequest_Name::default_instance_ = NULL;

MakeNamesRequest_Name* MakeNamesRequest_Name::New() const {
  return new MakeNamesRequest_Name;
}

void MakeNamesRequest_Name::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    ea_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeNamesRequest_Name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.MakeNamesRequest.Name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ea = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ea_)));
          set_has_ea();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.MakeNamesRequest.Name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.MakeNamesRequest.Name)
  return false;
#undef DO_
}

void MakeNamesRequest_Name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.MakeNamesRequest.Name)
  // required uint64 ea = 1;
  if (has_ea()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ea(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.MakeNamesRequest.Name)
}

::google::protobuf::uint8* MakeNamesRequest_Name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.MakeNamesRequest.Name)
  // required uint64 ea = 1;
  if (has_ea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ea(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.MakeNamesRequest.Name)
  return target;
}

int MakeNamesRequest_Name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ea = 1;
    if (has_ea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ea());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeNamesRequest_Name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeNamesRequest_Name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeNamesRequest_Name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeNamesRequest_Name::MergeFrom(const MakeNamesRequest_Name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ea()) {
      set_ea(from.ea());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeNamesRequest_Name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeNamesRequest_Name::CopyFrom(const MakeNamesRequest_Name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeNamesRequest_Name::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MakeNamesRequest_Name::Swap(MakeNamesRequest_Name* other) {
  if (other != this) {
    std::swap(ea_, other->ea_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeNamesRequest_Name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeNamesRequest_Name_descriptor_;
  metadata.reflection = MakeNamesRequest_Name_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MakeNamesRequest::kNamesFieldNumber;
const int MakeNamesRequest::kBaseFieldNumber;
const int MakeNamesRequest::kRemoteBaseFieldNumber;
#endif  // !_MSC_VER

MakeNamesRequest::MakeNamesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.MakeNamesRequest)
}

void MakeNamesRequest::InitAsDefaultInstance() {
}

MakeNamesRequest::MakeNamesRequest(const MakeNamesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.MakeNamesRequest)
}

void MakeNamesRequest::SharedCtor() {
  _cached_size_ = 0;
  base_ = GOOGLE_ULONGLONG(0);
  remote_base_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeNamesRequest::~MakeNamesRequest() {
  // @@protoc_insertion_point(destructor:rpc.MakeNamesRequest)
  SharedDtor();
}

void MakeNamesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MakeNamesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeNamesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeNamesRequest_descriptor_;
}

const MakeNamesRequest& MakeNamesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

MakeNamesRequest* MakeNamesRequest::default_instance_ = NULL;

MakeNamesRequest* MakeNamesRequest::New() const {
  return new MakeNamesRequest;
}

void MakeNamesRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MakeNamesRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(base_, remote_base_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeNamesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.MakeNamesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.MakeNamesRequest.Name names = 1;
      case 1: {
        if (tag == 10) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectTag(16)) goto parse_base;
        break;
      }

      // required uint64 base = 2;
      case 2: {
        if (tag == 16) {
         parse_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_remote_base;
        break;
      }

      // required uint64 remote_base = 3;
      case 3: {
        if (tag == 24) {
         parse_remote_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remote_base_)));
          set_has_remote_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.MakeNamesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.MakeNamesRequest)
  return false;
#undef DO_
}

void MakeNamesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.MakeNamesRequest)
  // repeated .rpc.MakeNamesRequest.Name names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->names(i), output);
  }

  // required uint64 base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->base(), output);
  }

  // required uint64 remote_base = 3;
  if (has_remote_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->remote_base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.MakeNamesRequest)
}

::google::protobuf::uint8* MakeNamesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.MakeNamesRequest)
  // repeated .rpc.MakeNamesRequest.Name names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->names(i), target);
  }

  // required uint64 base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->base(), target);
  }

  // required uint64 remote_base = 3;
  if (has_remote_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->remote_base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.MakeNamesRequest)
  return target;
}

int MakeNamesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint64 base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base());
    }

    // required uint64 remote_base = 3;
    if (has_remote_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->remote_base());
    }

  }
  // repeated .rpc.MakeNamesRequest.Name names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeNamesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeNamesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeNamesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeNamesRequest::MergeFrom(const MakeNamesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_remote_base()) {
      set_remote_base(from.remote_base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeNamesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeNamesRequest::CopyFrom(const MakeNamesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeNamesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->names())) return false;
  return true;
}

void MakeNamesRequest::Swap(MakeNamesRequest* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(base_, other->base_);
    std::swap(remote_base_, other->remote_base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeNamesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeNamesRequest_descriptor_;
  metadata.reflection = MakeNamesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakeCommentsRequest_Name::kEaFieldNumber;
const int MakeCommentsRequest_Name::kNameFieldNumber;
#endif  // !_MSC_VER

MakeCommentsRequest_Name::MakeCommentsRequest_Name()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.MakeCommentsRequest.Name)
}

void MakeCommentsRequest_Name::InitAsDefaultInstance() {
}

MakeCommentsRequest_Name::MakeCommentsRequest_Name(const MakeCommentsRequest_Name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.MakeCommentsRequest.Name)
}

void MakeCommentsRequest_Name::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ea_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeCommentsRequest_Name::~MakeCommentsRequest_Name() {
  // @@protoc_insertion_point(destructor:rpc.MakeCommentsRequest.Name)
  SharedDtor();
}

void MakeCommentsRequest_Name::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MakeCommentsRequest_Name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeCommentsRequest_Name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeCommentsRequest_Name_descriptor_;
}

const MakeCommentsRequest_Name& MakeCommentsRequest_Name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

MakeCommentsRequest_Name* MakeCommentsRequest_Name::default_instance_ = NULL;

MakeCommentsRequest_Name* MakeCommentsRequest_Name::New() const {
  return new MakeCommentsRequest_Name;
}

void MakeCommentsRequest_Name::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    ea_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeCommentsRequest_Name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.MakeCommentsRequest.Name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ea = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ea_)));
          set_has_ea();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.MakeCommentsRequest.Name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.MakeCommentsRequest.Name)
  return false;
#undef DO_
}

void MakeCommentsRequest_Name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.MakeCommentsRequest.Name)
  // required uint64 ea = 1;
  if (has_ea()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ea(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.MakeCommentsRequest.Name)
}

::google::protobuf::uint8* MakeCommentsRequest_Name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.MakeCommentsRequest.Name)
  // required uint64 ea = 1;
  if (has_ea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ea(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.MakeCommentsRequest.Name)
  return target;
}

int MakeCommentsRequest_Name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ea = 1;
    if (has_ea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ea());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeCommentsRequest_Name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeCommentsRequest_Name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeCommentsRequest_Name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeCommentsRequest_Name::MergeFrom(const MakeCommentsRequest_Name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ea()) {
      set_ea(from.ea());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeCommentsRequest_Name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeCommentsRequest_Name::CopyFrom(const MakeCommentsRequest_Name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeCommentsRequest_Name::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MakeCommentsRequest_Name::Swap(MakeCommentsRequest_Name* other) {
  if (other != this) {
    std::swap(ea_, other->ea_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeCommentsRequest_Name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeCommentsRequest_Name_descriptor_;
  metadata.reflection = MakeCommentsRequest_Name_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MakeCommentsRequest::kNamesFieldNumber;
const int MakeCommentsRequest::kBaseFieldNumber;
const int MakeCommentsRequest::kRemoteBaseFieldNumber;
#endif  // !_MSC_VER

MakeCommentsRequest::MakeCommentsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.MakeCommentsRequest)
}

void MakeCommentsRequest::InitAsDefaultInstance() {
}

MakeCommentsRequest::MakeCommentsRequest(const MakeCommentsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.MakeCommentsRequest)
}

void MakeCommentsRequest::SharedCtor() {
  _cached_size_ = 0;
  base_ = GOOGLE_ULONGLONG(0);
  remote_base_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeCommentsRequest::~MakeCommentsRequest() {
  // @@protoc_insertion_point(destructor:rpc.MakeCommentsRequest)
  SharedDtor();
}

void MakeCommentsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MakeCommentsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeCommentsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeCommentsRequest_descriptor_;
}

const MakeCommentsRequest& MakeCommentsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

MakeCommentsRequest* MakeCommentsRequest::default_instance_ = NULL;

MakeCommentsRequest* MakeCommentsRequest::New() const {
  return new MakeCommentsRequest;
}

void MakeCommentsRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MakeCommentsRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(base_, remote_base_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeCommentsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.MakeCommentsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.MakeCommentsRequest.Name names = 1;
      case 1: {
        if (tag == 10) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectTag(16)) goto parse_base;
        break;
      }

      // required uint64 base = 2;
      case 2: {
        if (tag == 16) {
         parse_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_remote_base;
        break;
      }

      // required uint64 remote_base = 3;
      case 3: {
        if (tag == 24) {
         parse_remote_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remote_base_)));
          set_has_remote_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.MakeCommentsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.MakeCommentsRequest)
  return false;
#undef DO_
}

void MakeCommentsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.MakeCommentsRequest)
  // repeated .rpc.MakeCommentsRequest.Name names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->names(i), output);
  }

  // required uint64 base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->base(), output);
  }

  // required uint64 remote_base = 3;
  if (has_remote_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->remote_base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.MakeCommentsRequest)
}

::google::protobuf::uint8* MakeCommentsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.MakeCommentsRequest)
  // repeated .rpc.MakeCommentsRequest.Name names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->names(i), target);
  }

  // required uint64 base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->base(), target);
  }

  // required uint64 remote_base = 3;
  if (has_remote_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->remote_base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.MakeCommentsRequest)
  return target;
}

int MakeCommentsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint64 base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base());
    }

    // required uint64 remote_base = 3;
    if (has_remote_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->remote_base());
    }

  }
  // repeated .rpc.MakeCommentsRequest.Name names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeCommentsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeCommentsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeCommentsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeCommentsRequest::MergeFrom(const MakeCommentsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_remote_base()) {
      set_remote_base(from.remote_base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeCommentsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeCommentsRequest::CopyFrom(const MakeCommentsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeCommentsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->names())) return false;
  return true;
}

void MakeCommentsRequest::Swap(MakeCommentsRequest* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(base_, other->base_);
    std::swap(remote_base_, other->remote_base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeCommentsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeCommentsRequest_descriptor_;
  metadata.reflection = MakeCommentsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMemoryMapResult_Memory::kBaseFieldNumber;
const int GetMemoryMapResult_Memory::kSizeFieldNumber;
const int GetMemoryMapResult_Memory::kAccessFieldNumber;
const int GetMemoryMapResult_Memory::kNameFieldNumber;
#endif  // !_MSC_VER

GetMemoryMapResult_Memory::GetMemoryMapResult_Memory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.GetMemoryMapResult.Memory)
}

void GetMemoryMapResult_Memory::InitAsDefaultInstance() {
}

GetMemoryMapResult_Memory::GetMemoryMapResult_Memory(const GetMemoryMapResult_Memory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.GetMemoryMapResult.Memory)
}

void GetMemoryMapResult_Memory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  access_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMemoryMapResult_Memory::~GetMemoryMapResult_Memory() {
  // @@protoc_insertion_point(destructor:rpc.GetMemoryMapResult.Memory)
  SharedDtor();
}

void GetMemoryMapResult_Memory::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GetMemoryMapResult_Memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMemoryMapResult_Memory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMemoryMapResult_Memory_descriptor_;
}

const GetMemoryMapResult_Memory& GetMemoryMapResult_Memory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

GetMemoryMapResult_Memory* GetMemoryMapResult_Memory::default_instance_ = NULL;

GetMemoryMapResult_Memory* GetMemoryMapResult_Memory::New() const {
  return new GetMemoryMapResult_Memory;
}

void GetMemoryMapResult_Memory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetMemoryMapResult_Memory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(base_, size_);
    access_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMemoryMapResult_Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.GetMemoryMapResult.Memory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 base = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required uint64 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_access;
        break;
      }

      // required uint32 access = 3;
      case 3: {
        if (tag == 24) {
         parse_access:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &access_)));
          set_has_access();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.GetMemoryMapResult.Memory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.GetMemoryMapResult.Memory)
  return false;
#undef DO_
}

void GetMemoryMapResult_Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.GetMemoryMapResult.Memory)
  // required uint64 base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->base(), output);
  }

  // required uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // required uint32 access = 3;
  if (has_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->access(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.GetMemoryMapResult.Memory)
}

::google::protobuf::uint8* GetMemoryMapResult_Memory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.GetMemoryMapResult.Memory)
  // required uint64 base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->base(), target);
  }

  // required uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // required uint32 access = 3;
  if (has_access()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->access(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.GetMemoryMapResult.Memory)
  return target;
}

int GetMemoryMapResult_Memory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base());
    }

    // required uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // required uint32 access = 3;
    if (has_access()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->access());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMemoryMapResult_Memory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMemoryMapResult_Memory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMemoryMapResult_Memory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMemoryMapResult_Memory::MergeFrom(const GetMemoryMapResult_Memory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_access()) {
      set_access(from.access());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMemoryMapResult_Memory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMemoryMapResult_Memory::CopyFrom(const GetMemoryMapResult_Memory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMemoryMapResult_Memory::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GetMemoryMapResult_Memory::Swap(GetMemoryMapResult_Memory* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(size_, other->size_);
    std::swap(access_, other->access_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMemoryMapResult_Memory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMemoryMapResult_Memory_descriptor_;
  metadata.reflection = GetMemoryMapResult_Memory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetMemoryMapResult::kMemoriesFieldNumber;
#endif  // !_MSC_VER

GetMemoryMapResult::GetMemoryMapResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.GetMemoryMapResult)
}

void GetMemoryMapResult::InitAsDefaultInstance() {
}

GetMemoryMapResult::GetMemoryMapResult(const GetMemoryMapResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.GetMemoryMapResult)
}

void GetMemoryMapResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMemoryMapResult::~GetMemoryMapResult() {
  // @@protoc_insertion_point(destructor:rpc.GetMemoryMapResult)
  SharedDtor();
}

void GetMemoryMapResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMemoryMapResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMemoryMapResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMemoryMapResult_descriptor_;
}

const GetMemoryMapResult& GetMemoryMapResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

GetMemoryMapResult* GetMemoryMapResult::default_instance_ = NULL;

GetMemoryMapResult* GetMemoryMapResult::New() const {
  return new GetMemoryMapResult;
}

void GetMemoryMapResult::Clear() {
  memories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMemoryMapResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.GetMemoryMapResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.GetMemoryMapResult.Memory memories = 1;
      case 1: {
        if (tag == 10) {
         parse_memories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memories()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_memories;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.GetMemoryMapResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.GetMemoryMapResult)
  return false;
#undef DO_
}

void GetMemoryMapResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.GetMemoryMapResult)
  // repeated .rpc.GetMemoryMapResult.Memory memories = 1;
  for (int i = 0; i < this->memories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->memories(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.GetMemoryMapResult)
}

::google::protobuf::uint8* GetMemoryMapResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.GetMemoryMapResult)
  // repeated .rpc.GetMemoryMapResult.Memory memories = 1;
  for (int i = 0; i < this->memories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->memories(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.GetMemoryMapResult)
  return target;
}

int GetMemoryMapResult::ByteSize() const {
  int total_size = 0;

  // repeated .rpc.GetMemoryMapResult.Memory memories = 1;
  total_size += 1 * this->memories_size();
  for (int i = 0; i < this->memories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memories(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMemoryMapResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMemoryMapResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMemoryMapResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMemoryMapResult::MergeFrom(const GetMemoryMapResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  memories_.MergeFrom(from.memories_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMemoryMapResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMemoryMapResult::CopyFrom(const GetMemoryMapResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMemoryMapResult::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->memories())) return false;
  return true;
}

void GetMemoryMapResult::Swap(GetMemoryMapResult* other) {
  if (other != this) {
    memories_.Swap(&other->memories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMemoryMapResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMemoryMapResult_descriptor_;
  metadata.reflection = GetMemoryMapResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadMemoryRegionsRequest_Region::kAddrFieldNumber;
const int ReadMemoryRegionsRequest_Region::kSizeFieldNumber;
#endif  // !_MSC_VER

ReadMemoryRegionsRequest_Region::ReadMemoryRegionsRequest_Region()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.ReadMemoryRegionsRequest.Region)
}

void ReadMemoryRegionsRequest_Region::InitAsDefaultInstance() {
}

ReadMemoryRegionsRequest_Region::ReadMemoryRegionsRequest_Region(const ReadMemoryRegionsRequest_Region& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.ReadMemoryRegionsRequest.Region)
}

void ReadMemoryRegionsRequest_Region::SharedCtor() {
  _cached_size_ = 0;
  addr_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadMemoryRegionsRequest_Region::~ReadMemoryRegionsRequest_Region() {
  // @@protoc_insertion_point(destructor:rpc.ReadMemoryRegionsRequest.Region)
  SharedDtor();
}

void ReadMemoryRegionsRequest_Region::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadMemoryRegionsRequest_Region::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadMemoryRegionsRequest_Region::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadMemoryRegionsRequest_Region_descriptor_;
}

const ReadMemoryRegionsRequest_Region& ReadMemoryRegionsRequest_Region::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

ReadMemoryRegionsRequest_Region* ReadMemoryRegionsRequest_Region::default_instance_ = NULL;

ReadMemoryRegionsRequest_Region* ReadMemoryRegionsRequest_Region::New() const {
  return new ReadMemoryRegionsRequest_Region;
}

void ReadMemoryRegionsRequest_Region::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReadMemoryRegionsRequest_Region*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(addr_, size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadMemoryRegionsRequest_Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.ReadMemoryRegionsRequest.Region)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 addr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required uint64 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.ReadMemoryRegionsRequest.Region)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.ReadMemoryRegionsRequest.Region)
  return false;
#undef DO_
}

void ReadMemoryRegionsRequest_Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.ReadMemoryRegionsRequest.Region)
  // required uint64 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->addr(), output);
  }

  // required uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.ReadMemoryRegionsRequest.Region)
}

::google::protobuf::uint8* ReadMemoryRegionsRequest_Region::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.ReadMemoryRegionsRequest.Region)
  // required uint64 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->addr(), target);
  }

  // required uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.ReadMemoryRegionsRequest.Region)
  return target;
}

int ReadMemoryRegionsRequest_Region::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->addr());
    }

    // required uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadMemoryRegionsRequest_Region::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadMemoryRegionsRequest_Region* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadMemoryRegionsRequest_Region*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadMemoryRegionsRequest_Region::MergeFrom(const ReadMemoryRegionsRequest_Region& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadMemoryRegionsRequest_Region::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadMemoryRegionsRequest_Region::CopyFrom(const ReadMemoryRegionsRequest_Region& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadMemoryRegionsRequest_Region::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReadMemoryRegionsRequest_Region::Swap(ReadMemoryRegionsRequest_Region* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadMemoryRegionsRequest_Region::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadMemoryRegionsRequest_Region_descriptor_;
  metadata.reflection = ReadMemoryRegionsRequest_Region_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadMemoryRegionsRequest::kRegionsFieldNumber;
#endif  // !_MSC_VER

ReadMemoryRegionsRequest::ReadMemoryRegionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.ReadMemoryRegionsRequest)
}

void ReadMemoryRegionsRequest::InitAsDefaultInstance() {
}

ReadMemoryRegionsRequest::ReadMemoryRegionsRequest(const ReadMemoryRegionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.ReadMemoryRegionsRequest)
}

void ReadMemoryRegionsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadMemoryRegionsRequest::~ReadMemoryRegionsRequest() {
  // @@protoc_insertion_point(destructor:rpc.ReadMemoryRegionsRequest)
  SharedDtor();
}

void ReadMemoryRegionsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadMemoryRegionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadMemoryRegionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadMemoryRegionsRequest_descriptor_;
}

const ReadMemoryRegionsRequest& ReadMemoryRegionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

ReadMemoryRegionsRequest* ReadMemoryRegionsRequest::default_instance_ = NULL;

ReadMemoryRegionsRequest* ReadMemoryRegionsRequest::New() const {
  return new ReadMemoryRegionsRequest;
}

void ReadMemoryRegionsRequest::Clear() {
  regions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadMemoryRegionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.ReadMemoryRegionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.ReadMemoryRegionsRequest.Region regions = 1;
      case 1: {
        if (tag == 10) {
         parse_regions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_regions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.ReadMemoryRegionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.ReadMemoryRegionsRequest)
  return false;
#undef DO_
}

void ReadMemoryRegionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.ReadMemoryRegionsRequest)
  // repeated .rpc.ReadMemoryRegionsRequest.Region regions = 1;
  for (int i = 0; i < this->regions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->regions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.ReadMemoryRegionsRequest)
}

::google::protobuf::uint8* ReadMemoryRegionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.ReadMemoryRegionsRequest)
  // repeated .rpc.ReadMemoryRegionsRequest.Region regions = 1;
  for (int i = 0; i < this->regions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->regions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.ReadMemoryRegionsRequest)
  return target;
}

int ReadMemoryRegionsRequest::ByteSize() const {
  int total_size = 0;

  // repeated .rpc.ReadMemoryRegionsRequest.Region regions = 1;
  total_size += 1 * this->regions_size();
  for (int i = 0; i < this->regions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadMemoryRegionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadMemoryRegionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadMemoryRegionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadMemoryRegionsRequest::MergeFrom(const ReadMemoryRegionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  regions_.MergeFrom(from.regions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadMemoryRegionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadMemoryRegionsRequest::CopyFrom(const ReadMemoryRegionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadMemoryRegionsRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->regions())) return false;
  return true;
}

void ReadMemoryRegionsRequest::Swap(ReadMemoryRegionsRequest* other) {
  if (other != this) {
    regions_.Swap(&other->regions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadMemoryRegionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadMemoryRegionsRequest_descriptor_;
  metadata.reflection = ReadMemoryRegionsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadMemoryRegionsResult_Memory::kAddrFieldNumber;
const int ReadMemoryRegionsResult_Memory::kSizeFieldNumber;
const int ReadMemoryRegionsResult_Memory::kMemFieldNumber;
const int ReadMemoryRegionsResult_Memory::kProtectFieldNumber;
#endif  // !_MSC_VER

ReadMemoryRegionsResult_Memory::ReadMemoryRegionsResult_Memory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.ReadMemoryRegionsResult.Memory)
}

void ReadMemoryRegionsResult_Memory::InitAsDefaultInstance() {
}

ReadMemoryRegionsResult_Memory::ReadMemoryRegionsResult_Memory(const ReadMemoryRegionsResult_Memory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.ReadMemoryRegionsResult.Memory)
}

void ReadMemoryRegionsResult_Memory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  addr_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  mem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadMemoryRegionsResult_Memory::~ReadMemoryRegionsResult_Memory() {
  // @@protoc_insertion_point(destructor:rpc.ReadMemoryRegionsResult.Memory)
  SharedDtor();
}

void ReadMemoryRegionsResult_Memory::SharedDtor() {
  if (mem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mem_;
  }
  if (this != default_instance_) {
  }
}

void ReadMemoryRegionsResult_Memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadMemoryRegionsResult_Memory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadMemoryRegionsResult_Memory_descriptor_;
}

const ReadMemoryRegionsResult_Memory& ReadMemoryRegionsResult_Memory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

ReadMemoryRegionsResult_Memory* ReadMemoryRegionsResult_Memory::default_instance_ = NULL;

ReadMemoryRegionsResult_Memory* ReadMemoryRegionsResult_Memory::New() const {
  return new ReadMemoryRegionsResult_Memory;
}

void ReadMemoryRegionsResult_Memory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReadMemoryRegionsResult_Memory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(addr_, size_);
    if (has_mem()) {
      if (mem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mem_->clear();
      }
    }
    protect_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadMemoryRegionsResult_Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.ReadMemoryRegionsResult.Memory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 addr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required uint64 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mem;
        break;
      }

      // required bytes mem = 3;
      case 3: {
        if (tag == 26) {
         parse_mem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_protect;
        break;
      }

      // required uint32 protect = 4;
      case 4: {
        if (tag == 32) {
         parse_protect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protect_)));
          set_has_protect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.ReadMemoryRegionsResult.Memory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.ReadMemoryRegionsResult.Memory)
  return false;
#undef DO_
}

void ReadMemoryRegionsResult_Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.ReadMemoryRegionsResult.Memory)
  // required uint64 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->addr(), output);
  }

  // required uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // required bytes mem = 3;
  if (has_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mem(), output);
  }

  // required uint32 protect = 4;
  if (has_protect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.ReadMemoryRegionsResult.Memory)
}

::google::protobuf::uint8* ReadMemoryRegionsResult_Memory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.ReadMemoryRegionsResult.Memory)
  // required uint64 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->addr(), target);
  }

  // required uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // required bytes mem = 3;
  if (has_mem()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mem(), target);
  }

  // required uint32 protect = 4;
  if (has_protect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.ReadMemoryRegionsResult.Memory)
  return target;
}

int ReadMemoryRegionsResult_Memory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->addr());
    }

    // required uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // required bytes mem = 3;
    if (has_mem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mem());
    }

    // required uint32 protect = 4;
    if (has_protect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadMemoryRegionsResult_Memory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadMemoryRegionsResult_Memory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadMemoryRegionsResult_Memory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadMemoryRegionsResult_Memory::MergeFrom(const ReadMemoryRegionsResult_Memory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_mem()) {
      set_mem(from.mem());
    }
    if (from.has_protect()) {
      set_protect(from.protect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadMemoryRegionsResult_Memory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadMemoryRegionsResult_Memory::CopyFrom(const ReadMemoryRegionsResult_Memory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadMemoryRegionsResult_Memory::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ReadMemoryRegionsResult_Memory::Swap(ReadMemoryRegionsResult_Memory* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(size_, other->size_);
    std::swap(mem_, other->mem_);
    std::swap(protect_, other->protect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadMemoryRegionsResult_Memory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadMemoryRegionsResult_Memory_descriptor_;
  metadata.reflection = ReadMemoryRegionsResult_Memory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadMemoryRegionsResult::kMemoriesFieldNumber;
#endif  // !_MSC_VER

ReadMemoryRegionsResult::ReadMemoryRegionsResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.ReadMemoryRegionsResult)
}

void ReadMemoryRegionsResult::InitAsDefaultInstance() {
}

ReadMemoryRegionsResult::ReadMemoryRegionsResult(const ReadMemoryRegionsResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.ReadMemoryRegionsResult)
}

void ReadMemoryRegionsResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadMemoryRegionsResult::~ReadMemoryRegionsResult() {
  // @@protoc_insertion_point(destructor:rpc.ReadMemoryRegionsResult)
  SharedDtor();
}

void ReadMemoryRegionsResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadMemoryRegionsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadMemoryRegionsResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadMemoryRegionsResult_descriptor_;
}

const ReadMemoryRegionsResult& ReadMemoryRegionsResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

ReadMemoryRegionsResult* ReadMemoryRegionsResult::default_instance_ = NULL;

ReadMemoryRegionsResult* ReadMemoryRegionsResult::New() const {
  return new ReadMemoryRegionsResult;
}

void ReadMemoryRegionsResult::Clear() {
  memories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadMemoryRegionsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.ReadMemoryRegionsResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.ReadMemoryRegionsResult.Memory memories = 1;
      case 1: {
        if (tag == 10) {
         parse_memories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memories()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_memories;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.ReadMemoryRegionsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.ReadMemoryRegionsResult)
  return false;
#undef DO_
}

void ReadMemoryRegionsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.ReadMemoryRegionsResult)
  // repeated .rpc.ReadMemoryRegionsResult.Memory memories = 1;
  for (int i = 0; i < this->memories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->memories(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.ReadMemoryRegionsResult)
}

::google::protobuf::uint8* ReadMemoryRegionsResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.ReadMemoryRegionsResult)
  // repeated .rpc.ReadMemoryRegionsResult.Memory memories = 1;
  for (int i = 0; i < this->memories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->memories(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.ReadMemoryRegionsResult)
  return target;
}

int ReadMemoryRegionsResult::ByteSize() const {
  int total_size = 0;

  // repeated .rpc.ReadMemoryRegionsResult.Memory memories = 1;
  total_size += 1 * this->memories_size();
  for (int i = 0; i < this->memories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memories(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadMemoryRegionsResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadMemoryRegionsResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadMemoryRegionsResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadMemoryRegionsResult::MergeFrom(const ReadMemoryRegionsResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  memories_.MergeFrom(from.memories_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadMemoryRegionsResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadMemoryRegionsResult::CopyFrom(const ReadMemoryRegionsResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadMemoryRegionsResult::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->memories())) return false;
  return true;
}

void ReadMemoryRegionsResult::Swap(ReadMemoryRegionsResult* other) {
  if (other != this) {
    memories_.Swap(&other->memories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadMemoryRegionsResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadMemoryRegionsResult_descriptor_;
  metadata.reflection = ReadMemoryRegionsResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnalyzeExternalRefsRequest::kEaFromFieldNumber;
const int AnalyzeExternalRefsRequest::kEaToFieldNumber;
const int AnalyzeExternalRefsRequest::kIncrementFieldNumber;
const int AnalyzeExternalRefsRequest::kAnalysingBaseFieldNumber;
const int AnalyzeExternalRefsRequest::kAnalysingSizeFieldNumber;
#endif  // !_MSC_VER

AnalyzeExternalRefsRequest::AnalyzeExternalRefsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.AnalyzeExternalRefsRequest)
}

void AnalyzeExternalRefsRequest::InitAsDefaultInstance() {
}

AnalyzeExternalRefsRequest::AnalyzeExternalRefsRequest(const AnalyzeExternalRefsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.AnalyzeExternalRefsRequest)
}

void AnalyzeExternalRefsRequest::SharedCtor() {
  _cached_size_ = 0;
  ea_from_ = GOOGLE_ULONGLONG(0);
  ea_to_ = GOOGLE_ULONGLONG(0);
  increment_ = 0u;
  analysing_base_ = GOOGLE_ULONGLONG(0);
  analysing_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnalyzeExternalRefsRequest::~AnalyzeExternalRefsRequest() {
  // @@protoc_insertion_point(destructor:rpc.AnalyzeExternalRefsRequest)
  SharedDtor();
}

void AnalyzeExternalRefsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnalyzeExternalRefsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeExternalRefsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalyzeExternalRefsRequest_descriptor_;
}

const AnalyzeExternalRefsRequest& AnalyzeExternalRefsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

AnalyzeExternalRefsRequest* AnalyzeExternalRefsRequest::default_instance_ = NULL;

AnalyzeExternalRefsRequest* AnalyzeExternalRefsRequest::New() const {
  return new AnalyzeExternalRefsRequest;
}

void AnalyzeExternalRefsRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnalyzeExternalRefsRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ea_from_, increment_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnalyzeExternalRefsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.AnalyzeExternalRefsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ea_from = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ea_from_)));
          set_has_ea_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ea_to;
        break;
      }

      // required uint64 ea_to = 2;
      case 2: {
        if (tag == 16) {
         parse_ea_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ea_to_)));
          set_has_ea_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_increment;
        break;
      }

      // required uint32 increment = 3;
      case 3: {
        if (tag == 24) {
         parse_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &increment_)));
          set_has_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_analysing_base;
        break;
      }

      // required uint64 analysing_base = 4;
      case 4: {
        if (tag == 32) {
         parse_analysing_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &analysing_base_)));
          set_has_analysing_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_analysing_size;
        break;
      }

      // required uint64 analysing_size = 5;
      case 5: {
        if (tag == 40) {
         parse_analysing_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &analysing_size_)));
          set_has_analysing_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.AnalyzeExternalRefsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.AnalyzeExternalRefsRequest)
  return false;
#undef DO_
}

void AnalyzeExternalRefsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.AnalyzeExternalRefsRequest)
  // required uint64 ea_from = 1;
  if (has_ea_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ea_from(), output);
  }

  // required uint64 ea_to = 2;
  if (has_ea_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ea_to(), output);
  }

  // required uint32 increment = 3;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->increment(), output);
  }

  // required uint64 analysing_base = 4;
  if (has_analysing_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->analysing_base(), output);
  }

  // required uint64 analysing_size = 5;
  if (has_analysing_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->analysing_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.AnalyzeExternalRefsRequest)
}

::google::protobuf::uint8* AnalyzeExternalRefsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.AnalyzeExternalRefsRequest)
  // required uint64 ea_from = 1;
  if (has_ea_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ea_from(), target);
  }

  // required uint64 ea_to = 2;
  if (has_ea_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ea_to(), target);
  }

  // required uint32 increment = 3;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->increment(), target);
  }

  // required uint64 analysing_base = 4;
  if (has_analysing_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->analysing_base(), target);
  }

  // required uint64 analysing_size = 5;
  if (has_analysing_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->analysing_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.AnalyzeExternalRefsRequest)
  return target;
}

int AnalyzeExternalRefsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ea_from = 1;
    if (has_ea_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ea_from());
    }

    // required uint64 ea_to = 2;
    if (has_ea_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ea_to());
    }

    // required uint32 increment = 3;
    if (has_increment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->increment());
    }

    // required uint64 analysing_base = 4;
    if (has_analysing_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->analysing_base());
    }

    // required uint64 analysing_size = 5;
    if (has_analysing_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->analysing_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeExternalRefsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnalyzeExternalRefsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnalyzeExternalRefsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnalyzeExternalRefsRequest::MergeFrom(const AnalyzeExternalRefsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ea_from()) {
      set_ea_from(from.ea_from());
    }
    if (from.has_ea_to()) {
      set_ea_to(from.ea_to());
    }
    if (from.has_increment()) {
      set_increment(from.increment());
    }
    if (from.has_analysing_base()) {
      set_analysing_base(from.analysing_base());
    }
    if (from.has_analysing_size()) {
      set_analysing_size(from.analysing_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnalyzeExternalRefsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeExternalRefsRequest::CopyFrom(const AnalyzeExternalRefsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeExternalRefsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AnalyzeExternalRefsRequest::Swap(AnalyzeExternalRefsRequest* other) {
  if (other != this) {
    std::swap(ea_from_, other->ea_from_);
    std::swap(ea_to_, other->ea_to_);
    std::swap(increment_, other->increment_);
    std::swap(analysing_base_, other->analysing_base_);
    std::swap(analysing_size_, other->analysing_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnalyzeExternalRefsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalyzeExternalRefsRequest_descriptor_;
  metadata.reflection = AnalyzeExternalRefsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnalyzeExternalRefsResult_PointerData::kEaFieldNumber;
const int AnalyzeExternalRefsResult_PointerData::kModuleFieldNumber;
const int AnalyzeExternalRefsResult_PointerData::kProcFieldNumber;
const int AnalyzeExternalRefsResult_PointerData::kOrdinalCollisionDllPathFieldNumber;
#endif  // !_MSC_VER

AnalyzeExternalRefsResult_PointerData::AnalyzeExternalRefsResult_PointerData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.AnalyzeExternalRefsResult.PointerData)
}

void AnalyzeExternalRefsResult_PointerData::InitAsDefaultInstance() {
}

AnalyzeExternalRefsResult_PointerData::AnalyzeExternalRefsResult_PointerData(const AnalyzeExternalRefsResult_PointerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.AnalyzeExternalRefsResult.PointerData)
}

void AnalyzeExternalRefsResult_PointerData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ea_ = GOOGLE_ULONGLONG(0);
  module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordinal_collision_dll_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnalyzeExternalRefsResult_PointerData::~AnalyzeExternalRefsResult_PointerData() {
  // @@protoc_insertion_point(destructor:rpc.AnalyzeExternalRefsResult.PointerData)
  SharedDtor();
}

void AnalyzeExternalRefsResult_PointerData::SharedDtor() {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_;
  }
  if (proc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proc_;
  }
  if (ordinal_collision_dll_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ordinal_collision_dll_path_;
  }
  if (this != default_instance_) {
  }
}

void AnalyzeExternalRefsResult_PointerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeExternalRefsResult_PointerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalyzeExternalRefsResult_PointerData_descriptor_;
}

const AnalyzeExternalRefsResult_PointerData& AnalyzeExternalRefsResult_PointerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

AnalyzeExternalRefsResult_PointerData* AnalyzeExternalRefsResult_PointerData::default_instance_ = NULL;

AnalyzeExternalRefsResult_PointerData* AnalyzeExternalRefsResult_PointerData::New() const {
  return new AnalyzeExternalRefsResult_PointerData;
}

void AnalyzeExternalRefsResult_PointerData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    ea_ = GOOGLE_ULONGLONG(0);
    if (has_module()) {
      if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        module_->clear();
      }
    }
    if (has_proc()) {
      if (proc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proc_->clear();
      }
    }
    if (has_ordinal_collision_dll_path()) {
      if (ordinal_collision_dll_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ordinal_collision_dll_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnalyzeExternalRefsResult_PointerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.AnalyzeExternalRefsResult.PointerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ea = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ea_)));
          set_has_ea();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_module;
        break;
      }

      // required string module = 2;
      case 2: {
        if (tag == 18) {
         parse_module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module().data(), this->module().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "module");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_proc;
        break;
      }

      // required string proc = 3;
      case 3: {
        if (tag == 26) {
         parse_proc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proc().data(), this->proc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ordinal_collision_dll_path;
        break;
      }

      // optional string ordinal_collision_dll_path = 4;
      case 4: {
        if (tag == 34) {
         parse_ordinal_collision_dll_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordinal_collision_dll_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ordinal_collision_dll_path().data(), this->ordinal_collision_dll_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ordinal_collision_dll_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.AnalyzeExternalRefsResult.PointerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.AnalyzeExternalRefsResult.PointerData)
  return false;
#undef DO_
}

void AnalyzeExternalRefsResult_PointerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.AnalyzeExternalRefsResult.PointerData)
  // required uint64 ea = 1;
  if (has_ea()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ea(), output);
  }

  // required string module = 2;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->module(), output);
  }

  // required string proc = 3;
  if (has_proc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proc().data(), this->proc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proc(), output);
  }

  // optional string ordinal_collision_dll_path = 4;
  if (has_ordinal_collision_dll_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ordinal_collision_dll_path().data(), this->ordinal_collision_dll_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ordinal_collision_dll_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ordinal_collision_dll_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.AnalyzeExternalRefsResult.PointerData)
}

::google::protobuf::uint8* AnalyzeExternalRefsResult_PointerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.AnalyzeExternalRefsResult.PointerData)
  // required uint64 ea = 1;
  if (has_ea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ea(), target);
  }

  // required string module = 2;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->module(), target);
  }

  // required string proc = 3;
  if (has_proc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proc().data(), this->proc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proc(), target);
  }

  // optional string ordinal_collision_dll_path = 4;
  if (has_ordinal_collision_dll_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ordinal_collision_dll_path().data(), this->ordinal_collision_dll_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ordinal_collision_dll_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ordinal_collision_dll_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.AnalyzeExternalRefsResult.PointerData)
  return target;
}

int AnalyzeExternalRefsResult_PointerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ea = 1;
    if (has_ea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ea());
    }

    // required string module = 2;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module());
    }

    // required string proc = 3;
    if (has_proc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc());
    }

    // optional string ordinal_collision_dll_path = 4;
    if (has_ordinal_collision_dll_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordinal_collision_dll_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeExternalRefsResult_PointerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnalyzeExternalRefsResult_PointerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnalyzeExternalRefsResult_PointerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnalyzeExternalRefsResult_PointerData::MergeFrom(const AnalyzeExternalRefsResult_PointerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ea()) {
      set_ea(from.ea());
    }
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_proc()) {
      set_proc(from.proc());
    }
    if (from.has_ordinal_collision_dll_path()) {
      set_ordinal_collision_dll_path(from.ordinal_collision_dll_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnalyzeExternalRefsResult_PointerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeExternalRefsResult_PointerData::CopyFrom(const AnalyzeExternalRefsResult_PointerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeExternalRefsResult_PointerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AnalyzeExternalRefsResult_PointerData::Swap(AnalyzeExternalRefsResult_PointerData* other) {
  if (other != this) {
    std::swap(ea_, other->ea_);
    std::swap(module_, other->module_);
    std::swap(proc_, other->proc_);
    std::swap(ordinal_collision_dll_path_, other->ordinal_collision_dll_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnalyzeExternalRefsResult_PointerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalyzeExternalRefsResult_PointerData_descriptor_;
  metadata.reflection = AnalyzeExternalRefsResult_PointerData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* AnalyzeExternalRefsResult_RefData_RefType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalyzeExternalRefsResult_RefData_RefType_descriptor_;
}
bool AnalyzeExternalRefsResult_RefData_RefType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AnalyzeExternalRefsResult_RefData_RefType AnalyzeExternalRefsResult_RefData::REFT_JMPCONST;
const AnalyzeExternalRefsResult_RefData_RefType AnalyzeExternalRefsResult_RefData::REFT_IMMCONST;
const AnalyzeExternalRefsResult_RefData_RefType AnalyzeExternalRefsResult_RefData::REFT_ADDRCONST;
const AnalyzeExternalRefsResult_RefData_RefType AnalyzeExternalRefsResult_RefData::RefType_MIN;
const AnalyzeExternalRefsResult_RefData_RefType AnalyzeExternalRefsResult_RefData::RefType_MAX;
const int AnalyzeExternalRefsResult_RefData::RefType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AnalyzeExternalRefsResult_RefData::kEaFieldNumber;
const int AnalyzeExternalRefsResult_RefData::kLenFieldNumber;
const int AnalyzeExternalRefsResult_RefData::kDisFieldNumber;
const int AnalyzeExternalRefsResult_RefData::kVFieldNumber;
const int AnalyzeExternalRefsResult_RefData::kRefTypeFieldNumber;
const int AnalyzeExternalRefsResult_RefData::kModuleFieldNumber;
const int AnalyzeExternalRefsResult_RefData::kProcFieldNumber;
const int AnalyzeExternalRefsResult_RefData::kOrdinalCollisionDllPathFieldNumber;
#endif  // !_MSC_VER

AnalyzeExternalRefsResult_RefData::AnalyzeExternalRefsResult_RefData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.AnalyzeExternalRefsResult.RefData)
}

void AnalyzeExternalRefsResult_RefData::InitAsDefaultInstance() {
}

AnalyzeExternalRefsResult_RefData::AnalyzeExternalRefsResult_RefData(const AnalyzeExternalRefsResult_RefData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.AnalyzeExternalRefsResult.RefData)
}

void AnalyzeExternalRefsResult_RefData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ea_ = GOOGLE_ULONGLONG(0);
  len_ = GOOGLE_ULONGLONG(0);
  dis_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_ = GOOGLE_ULONGLONG(0);
  ref_type_ = 1;
  module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordinal_collision_dll_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnalyzeExternalRefsResult_RefData::~AnalyzeExternalRefsResult_RefData() {
  // @@protoc_insertion_point(destructor:rpc.AnalyzeExternalRefsResult.RefData)
  SharedDtor();
}

void AnalyzeExternalRefsResult_RefData::SharedDtor() {
  if (dis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dis_;
  }
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_;
  }
  if (proc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proc_;
  }
  if (ordinal_collision_dll_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ordinal_collision_dll_path_;
  }
  if (this != default_instance_) {
  }
}

void AnalyzeExternalRefsResult_RefData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeExternalRefsResult_RefData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalyzeExternalRefsResult_RefData_descriptor_;
}

const AnalyzeExternalRefsResult_RefData& AnalyzeExternalRefsResult_RefData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

AnalyzeExternalRefsResult_RefData* AnalyzeExternalRefsResult_RefData::default_instance_ = NULL;

AnalyzeExternalRefsResult_RefData* AnalyzeExternalRefsResult_RefData::New() const {
  return new AnalyzeExternalRefsResult_RefData;
}

void AnalyzeExternalRefsResult_RefData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnalyzeExternalRefsResult_RefData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ea_, len_);
    if (has_dis()) {
      if (dis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dis_->clear();
      }
    }
    v_ = GOOGLE_ULONGLONG(0);
    ref_type_ = 1;
    if (has_module()) {
      if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        module_->clear();
      }
    }
    if (has_proc()) {
      if (proc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proc_->clear();
      }
    }
    if (has_ordinal_collision_dll_path()) {
      if (ordinal_collision_dll_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ordinal_collision_dll_path_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnalyzeExternalRefsResult_RefData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.AnalyzeExternalRefsResult.RefData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ea = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ea_)));
          set_has_ea();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }

      // required uint64 len = 2;
      case 2: {
        if (tag == 16) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dis;
        break;
      }

      // required string dis = 3;
      case 3: {
        if (tag == 26) {
         parse_dis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dis()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dis().data(), this->dis().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dis");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_v;
        break;
      }

      // required uint64 v = 4;
      case 4: {
        if (tag == 32) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ref_type;
        break;
      }

      // required .rpc.AnalyzeExternalRefsResult.RefData.RefType ref_type = 5;
      case 5: {
        if (tag == 40) {
         parse_ref_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rpc::AnalyzeExternalRefsResult_RefData_RefType_IsValid(value)) {
            set_ref_type(static_cast< ::rpc::AnalyzeExternalRefsResult_RefData_RefType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_module;
        break;
      }

      // required string module = 6;
      case 6: {
        if (tag == 50) {
         parse_module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module().data(), this->module().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "module");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_proc;
        break;
      }

      // required string proc = 7;
      case 7: {
        if (tag == 58) {
         parse_proc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proc().data(), this->proc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ordinal_collision_dll_path;
        break;
      }

      // optional string ordinal_collision_dll_path = 8;
      case 8: {
        if (tag == 66) {
         parse_ordinal_collision_dll_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordinal_collision_dll_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ordinal_collision_dll_path().data(), this->ordinal_collision_dll_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ordinal_collision_dll_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.AnalyzeExternalRefsResult.RefData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.AnalyzeExternalRefsResult.RefData)
  return false;
#undef DO_
}

void AnalyzeExternalRefsResult_RefData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.AnalyzeExternalRefsResult.RefData)
  // required uint64 ea = 1;
  if (has_ea()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ea(), output);
  }

  // required uint64 len = 2;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->len(), output);
  }

  // required string dis = 3;
  if (has_dis()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dis().data(), this->dis().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dis(), output);
  }

  // required uint64 v = 4;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->v(), output);
  }

  // required .rpc.AnalyzeExternalRefsResult.RefData.RefType ref_type = 5;
  if (has_ref_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ref_type(), output);
  }

  // required string module = 6;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->module(), output);
  }

  // required string proc = 7;
  if (has_proc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proc().data(), this->proc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->proc(), output);
  }

  // optional string ordinal_collision_dll_path = 8;
  if (has_ordinal_collision_dll_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ordinal_collision_dll_path().data(), this->ordinal_collision_dll_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ordinal_collision_dll_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ordinal_collision_dll_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.AnalyzeExternalRefsResult.RefData)
}

::google::protobuf::uint8* AnalyzeExternalRefsResult_RefData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.AnalyzeExternalRefsResult.RefData)
  // required uint64 ea = 1;
  if (has_ea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ea(), target);
  }

  // required uint64 len = 2;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->len(), target);
  }

  // required string dis = 3;
  if (has_dis()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dis().data(), this->dis().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dis(), target);
  }

  // required uint64 v = 4;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->v(), target);
  }

  // required .rpc.AnalyzeExternalRefsResult.RefData.RefType ref_type = 5;
  if (has_ref_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ref_type(), target);
  }

  // required string module = 6;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->module(), target);
  }

  // required string proc = 7;
  if (has_proc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proc().data(), this->proc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->proc(), target);
  }

  // optional string ordinal_collision_dll_path = 8;
  if (has_ordinal_collision_dll_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ordinal_collision_dll_path().data(), this->ordinal_collision_dll_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ordinal_collision_dll_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ordinal_collision_dll_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.AnalyzeExternalRefsResult.RefData)
  return target;
}

int AnalyzeExternalRefsResult_RefData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ea = 1;
    if (has_ea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ea());
    }

    // required uint64 len = 2;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->len());
    }

    // required string dis = 3;
    if (has_dis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dis());
    }

    // required uint64 v = 4;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->v());
    }

    // required .rpc.AnalyzeExternalRefsResult.RefData.RefType ref_type = 5;
    if (has_ref_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ref_type());
    }

    // required string module = 6;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module());
    }

    // required string proc = 7;
    if (has_proc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc());
    }

    // optional string ordinal_collision_dll_path = 8;
    if (has_ordinal_collision_dll_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordinal_collision_dll_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeExternalRefsResult_RefData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnalyzeExternalRefsResult_RefData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnalyzeExternalRefsResult_RefData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnalyzeExternalRefsResult_RefData::MergeFrom(const AnalyzeExternalRefsResult_RefData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ea()) {
      set_ea(from.ea());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_dis()) {
      set_dis(from.dis());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_ref_type()) {
      set_ref_type(from.ref_type());
    }
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_proc()) {
      set_proc(from.proc());
    }
    if (from.has_ordinal_collision_dll_path()) {
      set_ordinal_collision_dll_path(from.ordinal_collision_dll_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnalyzeExternalRefsResult_RefData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeExternalRefsResult_RefData::CopyFrom(const AnalyzeExternalRefsResult_RefData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeExternalRefsResult_RefData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void AnalyzeExternalRefsResult_RefData::Swap(AnalyzeExternalRefsResult_RefData* other) {
  if (other != this) {
    std::swap(ea_, other->ea_);
    std::swap(len_, other->len_);
    std::swap(dis_, other->dis_);
    std::swap(v_, other->v_);
    std::swap(ref_type_, other->ref_type_);
    std::swap(module_, other->module_);
    std::swap(proc_, other->proc_);
    std::swap(ordinal_collision_dll_path_, other->ordinal_collision_dll_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnalyzeExternalRefsResult_RefData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalyzeExternalRefsResult_RefData_descriptor_;
  metadata.reflection = AnalyzeExternalRefsResult_RefData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AnalyzeExternalRefsResult_reg_t::kEaxFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kEcxFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kEdxFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kEbxFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kEspFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kEbpFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kEsiFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kEdiFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kRipFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kRaxFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kRbxFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kRcxFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kRdxFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kRsiFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kRdiFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kRbpFieldNumber;
const int AnalyzeExternalRefsResult_reg_t::kRspFieldNumber;
#endif  // !_MSC_VER

AnalyzeExternalRefsResult_reg_t::AnalyzeExternalRefsResult_reg_t()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.AnalyzeExternalRefsResult.reg_t)
}

void AnalyzeExternalRefsResult_reg_t::InitAsDefaultInstance() {
}

AnalyzeExternalRefsResult_reg_t::AnalyzeExternalRefsResult_reg_t(const AnalyzeExternalRefsResult_reg_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.AnalyzeExternalRefsResult.reg_t)
}

void AnalyzeExternalRefsResult_reg_t::SharedCtor() {
  _cached_size_ = 0;
  eax_ = 0u;
  ecx_ = 0u;
  edx_ = 0u;
  ebx_ = 0u;
  esp_ = 0u;
  ebp_ = 0u;
  esi_ = 0u;
  edi_ = 0u;
  rip_ = GOOGLE_ULONGLONG(0);
  rax_ = GOOGLE_ULONGLONG(0);
  rbx_ = GOOGLE_ULONGLONG(0);
  rcx_ = GOOGLE_ULONGLONG(0);
  rdx_ = GOOGLE_ULONGLONG(0);
  rsi_ = GOOGLE_ULONGLONG(0);
  rdi_ = GOOGLE_ULONGLONG(0);
  rbp_ = GOOGLE_ULONGLONG(0);
  rsp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnalyzeExternalRefsResult_reg_t::~AnalyzeExternalRefsResult_reg_t() {
  // @@protoc_insertion_point(destructor:rpc.AnalyzeExternalRefsResult.reg_t)
  SharedDtor();
}

void AnalyzeExternalRefsResult_reg_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnalyzeExternalRefsResult_reg_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeExternalRefsResult_reg_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalyzeExternalRefsResult_reg_t_descriptor_;
}

const AnalyzeExternalRefsResult_reg_t& AnalyzeExternalRefsResult_reg_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

AnalyzeExternalRefsResult_reg_t* AnalyzeExternalRefsResult_reg_t::default_instance_ = NULL;

AnalyzeExternalRefsResult_reg_t* AnalyzeExternalRefsResult_reg_t::New() const {
  return new AnalyzeExternalRefsResult_reg_t;
}

void AnalyzeExternalRefsResult_reg_t::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnalyzeExternalRefsResult_reg_t*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(eax_, edi_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(rip_, rbp_);
  }
  rsp_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnalyzeExternalRefsResult_reg_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.AnalyzeExternalRefsResult.reg_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eax = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eax_)));
          set_has_eax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ecx;
        break;
      }

      // required uint32 ecx = 2;
      case 2: {
        if (tag == 16) {
         parse_ecx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ecx_)));
          set_has_ecx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_edx;
        break;
      }

      // required uint32 edx = 3;
      case 3: {
        if (tag == 24) {
         parse_edx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &edx_)));
          set_has_edx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ebx;
        break;
      }

      // required uint32 ebx = 4;
      case 4: {
        if (tag == 32) {
         parse_ebx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ebx_)));
          set_has_ebx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_esp;
        break;
      }

      // required uint32 esp = 5;
      case 5: {
        if (tag == 40) {
         parse_esp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &esp_)));
          set_has_esp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ebp;
        break;
      }

      // required uint32 ebp = 6;
      case 6: {
        if (tag == 48) {
         parse_ebp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ebp_)));
          set_has_ebp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_esi;
        break;
      }

      // required uint32 esi = 7;
      case 7: {
        if (tag == 56) {
         parse_esi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &esi_)));
          set_has_esi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_edi;
        break;
      }

      // required uint32 edi = 8;
      case 8: {
        if (tag == 64) {
         parse_edi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &edi_)));
          set_has_edi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_rip;
        break;
      }

      // required uint64 rip = 9;
      case 9: {
        if (tag == 72) {
         parse_rip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rip_)));
          set_has_rip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_rax;
        break;
      }

      // optional uint64 rax = 10;
      case 10: {
        if (tag == 80) {
         parse_rax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rax_)));
          set_has_rax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_rbx;
        break;
      }

      // optional uint64 rbx = 11;
      case 11: {
        if (tag == 88) {
         parse_rbx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rbx_)));
          set_has_rbx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_rcx;
        break;
      }

      // optional uint64 rcx = 12;
      case 12: {
        if (tag == 96) {
         parse_rcx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rcx_)));
          set_has_rcx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_rdx;
        break;
      }

      // optional uint64 rdx = 13;
      case 13: {
        if (tag == 104) {
         parse_rdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rdx_)));
          set_has_rdx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_rsi;
        break;
      }

      // optional uint64 rsi = 14;
      case 14: {
        if (tag == 112) {
         parse_rsi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rsi_)));
          set_has_rsi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_rdi;
        break;
      }

      // optional uint64 rdi = 15;
      case 15: {
        if (tag == 120) {
         parse_rdi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rdi_)));
          set_has_rdi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_rbp;
        break;
      }

      // optional uint64 rbp = 16;
      case 16: {
        if (tag == 128) {
         parse_rbp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rbp_)));
          set_has_rbp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_rsp;
        break;
      }

      // optional uint64 rsp = 17;
      case 17: {
        if (tag == 136) {
         parse_rsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rsp_)));
          set_has_rsp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.AnalyzeExternalRefsResult.reg_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.AnalyzeExternalRefsResult.reg_t)
  return false;
#undef DO_
}

void AnalyzeExternalRefsResult_reg_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.AnalyzeExternalRefsResult.reg_t)
  // required uint32 eax = 1;
  if (has_eax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eax(), output);
  }

  // required uint32 ecx = 2;
  if (has_ecx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ecx(), output);
  }

  // required uint32 edx = 3;
  if (has_edx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->edx(), output);
  }

  // required uint32 ebx = 4;
  if (has_ebx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ebx(), output);
  }

  // required uint32 esp = 5;
  if (has_esp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->esp(), output);
  }

  // required uint32 ebp = 6;
  if (has_ebp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ebp(), output);
  }

  // required uint32 esi = 7;
  if (has_esi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->esi(), output);
  }

  // required uint32 edi = 8;
  if (has_edi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->edi(), output);
  }

  // required uint64 rip = 9;
  if (has_rip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->rip(), output);
  }

  // optional uint64 rax = 10;
  if (has_rax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->rax(), output);
  }

  // optional uint64 rbx = 11;
  if (has_rbx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->rbx(), output);
  }

  // optional uint64 rcx = 12;
  if (has_rcx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->rcx(), output);
  }

  // optional uint64 rdx = 13;
  if (has_rdx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->rdx(), output);
  }

  // optional uint64 rsi = 14;
  if (has_rsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->rsi(), output);
  }

  // optional uint64 rdi = 15;
  if (has_rdi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->rdi(), output);
  }

  // optional uint64 rbp = 16;
  if (has_rbp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->rbp(), output);
  }

  // optional uint64 rsp = 17;
  if (has_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.AnalyzeExternalRefsResult.reg_t)
}

::google::protobuf::uint8* AnalyzeExternalRefsResult_reg_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.AnalyzeExternalRefsResult.reg_t)
  // required uint32 eax = 1;
  if (has_eax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eax(), target);
  }

  // required uint32 ecx = 2;
  if (has_ecx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ecx(), target);
  }

  // required uint32 edx = 3;
  if (has_edx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->edx(), target);
  }

  // required uint32 ebx = 4;
  if (has_ebx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ebx(), target);
  }

  // required uint32 esp = 5;
  if (has_esp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->esp(), target);
  }

  // required uint32 ebp = 6;
  if (has_ebp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ebp(), target);
  }

  // required uint32 esi = 7;
  if (has_esi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->esi(), target);
  }

  // required uint32 edi = 8;
  if (has_edi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->edi(), target);
  }

  // required uint64 rip = 9;
  if (has_rip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->rip(), target);
  }

  // optional uint64 rax = 10;
  if (has_rax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->rax(), target);
  }

  // optional uint64 rbx = 11;
  if (has_rbx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->rbx(), target);
  }

  // optional uint64 rcx = 12;
  if (has_rcx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->rcx(), target);
  }

  // optional uint64 rdx = 13;
  if (has_rdx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->rdx(), target);
  }

  // optional uint64 rsi = 14;
  if (has_rsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->rsi(), target);
  }

  // optional uint64 rdi = 15;
  if (has_rdi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->rdi(), target);
  }

  // optional uint64 rbp = 16;
  if (has_rbp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->rbp(), target);
  }

  // optional uint64 rsp = 17;
  if (has_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.AnalyzeExternalRefsResult.reg_t)
  return target;
}

int AnalyzeExternalRefsResult_reg_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eax = 1;
    if (has_eax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eax());
    }

    // required uint32 ecx = 2;
    if (has_ecx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ecx());
    }

    // required uint32 edx = 3;
    if (has_edx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->edx());
    }

    // required uint32 ebx = 4;
    if (has_ebx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ebx());
    }

    // required uint32 esp = 5;
    if (has_esp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->esp());
    }

    // required uint32 ebp = 6;
    if (has_ebp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ebp());
    }

    // required uint32 esi = 7;
    if (has_esi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->esi());
    }

    // required uint32 edi = 8;
    if (has_edi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->edi());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 rip = 9;
    if (has_rip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rip());
    }

    // optional uint64 rax = 10;
    if (has_rax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rax());
    }

    // optional uint64 rbx = 11;
    if (has_rbx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rbx());
    }

    // optional uint64 rcx = 12;
    if (has_rcx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rcx());
    }

    // optional uint64 rdx = 13;
    if (has_rdx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rdx());
    }

    // optional uint64 rsi = 14;
    if (has_rsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rsi());
    }

    // optional uint64 rdi = 15;
    if (has_rdi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rdi());
    }

    // optional uint64 rbp = 16;
    if (has_rbp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rbp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 rsp = 17;
    if (has_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeExternalRefsResult_reg_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnalyzeExternalRefsResult_reg_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnalyzeExternalRefsResult_reg_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnalyzeExternalRefsResult_reg_t::MergeFrom(const AnalyzeExternalRefsResult_reg_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eax()) {
      set_eax(from.eax());
    }
    if (from.has_ecx()) {
      set_ecx(from.ecx());
    }
    if (from.has_edx()) {
      set_edx(from.edx());
    }
    if (from.has_ebx()) {
      set_ebx(from.ebx());
    }
    if (from.has_esp()) {
      set_esp(from.esp());
    }
    if (from.has_ebp()) {
      set_ebp(from.ebp());
    }
    if (from.has_esi()) {
      set_esi(from.esi());
    }
    if (from.has_edi()) {
      set_edi(from.edi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rip()) {
      set_rip(from.rip());
    }
    if (from.has_rax()) {
      set_rax(from.rax());
    }
    if (from.has_rbx()) {
      set_rbx(from.rbx());
    }
    if (from.has_rcx()) {
      set_rcx(from.rcx());
    }
    if (from.has_rdx()) {
      set_rdx(from.rdx());
    }
    if (from.has_rsi()) {
      set_rsi(from.rsi());
    }
    if (from.has_rdi()) {
      set_rdi(from.rdi());
    }
    if (from.has_rbp()) {
      set_rbp(from.rbp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rsp()) {
      set_rsp(from.rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnalyzeExternalRefsResult_reg_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeExternalRefsResult_reg_t::CopyFrom(const AnalyzeExternalRefsResult_reg_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeExternalRefsResult_reg_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void AnalyzeExternalRefsResult_reg_t::Swap(AnalyzeExternalRefsResult_reg_t* other) {
  if (other != this) {
    std::swap(eax_, other->eax_);
    std::swap(ecx_, other->ecx_);
    std::swap(edx_, other->edx_);
    std::swap(ebx_, other->ebx_);
    std::swap(esp_, other->esp_);
    std::swap(ebp_, other->ebp_);
    std::swap(esi_, other->esi_);
    std::swap(edi_, other->edi_);
    std::swap(rip_, other->rip_);
    std::swap(rax_, other->rax_);
    std::swap(rbx_, other->rbx_);
    std::swap(rcx_, other->rcx_);
    std::swap(rdx_, other->rdx_);
    std::swap(rsi_, other->rsi_);
    std::swap(rdi_, other->rdi_);
    std::swap(rbp_, other->rbp_);
    std::swap(rsp_, other->rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnalyzeExternalRefsResult_reg_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalyzeExternalRefsResult_reg_t_descriptor_;
  metadata.reflection = AnalyzeExternalRefsResult_reg_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AnalyzeExternalRefsResult::kApiConstantsFieldNumber;
const int AnalyzeExternalRefsResult::kRefsFieldNumber;
const int AnalyzeExternalRefsResult::kContextFieldNumber;
#endif  // !_MSC_VER

AnalyzeExternalRefsResult::AnalyzeExternalRefsResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.AnalyzeExternalRefsResult)
}

void AnalyzeExternalRefsResult::InitAsDefaultInstance() {
  context_ = const_cast< ::rpc::AnalyzeExternalRefsResult_reg_t*>(&::rpc::AnalyzeExternalRefsResult_reg_t::default_instance());
}

AnalyzeExternalRefsResult::AnalyzeExternalRefsResult(const AnalyzeExternalRefsResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.AnalyzeExternalRefsResult)
}

void AnalyzeExternalRefsResult::SharedCtor() {
  _cached_size_ = 0;
  context_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnalyzeExternalRefsResult::~AnalyzeExternalRefsResult() {
  // @@protoc_insertion_point(destructor:rpc.AnalyzeExternalRefsResult)
  SharedDtor();
}

void AnalyzeExternalRefsResult::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
  }
}

void AnalyzeExternalRefsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeExternalRefsResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalyzeExternalRefsResult_descriptor_;
}

const AnalyzeExternalRefsResult& AnalyzeExternalRefsResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

AnalyzeExternalRefsResult* AnalyzeExternalRefsResult::default_instance_ = NULL;

AnalyzeExternalRefsResult* AnalyzeExternalRefsResult::New() const {
  return new AnalyzeExternalRefsResult;
}

void AnalyzeExternalRefsResult::Clear() {
  if (has_context()) {
    if (context_ != NULL) context_->::rpc::AnalyzeExternalRefsResult_reg_t::Clear();
  }
  api_constants_.Clear();
  refs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnalyzeExternalRefsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.AnalyzeExternalRefsResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.AnalyzeExternalRefsResult.PointerData api_constants = 1;
      case 1: {
        if (tag == 10) {
         parse_api_constants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_api_constants()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_api_constants;
        if (input->ExpectTag(18)) goto parse_refs;
        break;
      }

      // repeated .rpc.AnalyzeExternalRefsResult.RefData refs = 2;
      case 2: {
        if (tag == 18) {
         parse_refs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_refs;
        if (input->ExpectTag(26)) goto parse_context;
        break;
      }

      // required .rpc.AnalyzeExternalRefsResult.reg_t context = 3;
      case 3: {
        if (tag == 26) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.AnalyzeExternalRefsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.AnalyzeExternalRefsResult)
  return false;
#undef DO_
}

void AnalyzeExternalRefsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.AnalyzeExternalRefsResult)
  // repeated .rpc.AnalyzeExternalRefsResult.PointerData api_constants = 1;
  for (int i = 0; i < this->api_constants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->api_constants(i), output);
  }

  // repeated .rpc.AnalyzeExternalRefsResult.RefData refs = 2;
  for (int i = 0; i < this->refs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->refs(i), output);
  }

  // required .rpc.AnalyzeExternalRefsResult.reg_t context = 3;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.AnalyzeExternalRefsResult)
}

::google::protobuf::uint8* AnalyzeExternalRefsResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.AnalyzeExternalRefsResult)
  // repeated .rpc.AnalyzeExternalRefsResult.PointerData api_constants = 1;
  for (int i = 0; i < this->api_constants_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->api_constants(i), target);
  }

  // repeated .rpc.AnalyzeExternalRefsResult.RefData refs = 2;
  for (int i = 0; i < this->refs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->refs(i), target);
  }

  // required .rpc.AnalyzeExternalRefsResult.reg_t context = 3;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.AnalyzeExternalRefsResult)
  return target;
}

int AnalyzeExternalRefsResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .rpc.AnalyzeExternalRefsResult.reg_t context = 3;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->context());
    }

  }
  // repeated .rpc.AnalyzeExternalRefsResult.PointerData api_constants = 1;
  total_size += 1 * this->api_constants_size();
  for (int i = 0; i < this->api_constants_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->api_constants(i));
  }

  // repeated .rpc.AnalyzeExternalRefsResult.RefData refs = 2;
  total_size += 1 * this->refs_size();
  for (int i = 0; i < this->refs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeExternalRefsResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnalyzeExternalRefsResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnalyzeExternalRefsResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnalyzeExternalRefsResult::MergeFrom(const AnalyzeExternalRefsResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  api_constants_.MergeFrom(from.api_constants_);
  refs_.MergeFrom(from.refs_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_context()) {
      mutable_context()->::rpc::AnalyzeExternalRefsResult_reg_t::MergeFrom(from.context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnalyzeExternalRefsResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeExternalRefsResult::CopyFrom(const AnalyzeExternalRefsResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeExternalRefsResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->api_constants())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->refs())) return false;
  if (has_context()) {
    if (!this->context().IsInitialized()) return false;
  }
  return true;
}

void AnalyzeExternalRefsResult::Swap(AnalyzeExternalRefsResult* other) {
  if (other != this) {
    api_constants_.Swap(&other->api_constants_);
    refs_.Swap(&other->refs_);
    std::swap(context_, other->context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnalyzeExternalRefsResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalyzeExternalRefsResult_descriptor_;
  metadata.reflection = AnalyzeExternalRefsResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckPEHeadersRequest::kBaseFieldNumber;
const int CheckPEHeadersRequest::kSizeFieldNumber;
#endif  // !_MSC_VER

CheckPEHeadersRequest::CheckPEHeadersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.CheckPEHeadersRequest)
}

void CheckPEHeadersRequest::InitAsDefaultInstance() {
}

CheckPEHeadersRequest::CheckPEHeadersRequest(const CheckPEHeadersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.CheckPEHeadersRequest)
}

void CheckPEHeadersRequest::SharedCtor() {
  _cached_size_ = 0;
  base_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckPEHeadersRequest::~CheckPEHeadersRequest() {
  // @@protoc_insertion_point(destructor:rpc.CheckPEHeadersRequest)
  SharedDtor();
}

void CheckPEHeadersRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckPEHeadersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPEHeadersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPEHeadersRequest_descriptor_;
}

const CheckPEHeadersRequest& CheckPEHeadersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

CheckPEHeadersRequest* CheckPEHeadersRequest::default_instance_ = NULL;

CheckPEHeadersRequest* CheckPEHeadersRequest::New() const {
  return new CheckPEHeadersRequest;
}

void CheckPEHeadersRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheckPEHeadersRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(base_, size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckPEHeadersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.CheckPEHeadersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 base = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required uint64 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.CheckPEHeadersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.CheckPEHeadersRequest)
  return false;
#undef DO_
}

void CheckPEHeadersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.CheckPEHeadersRequest)
  // required uint64 base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->base(), output);
  }

  // required uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.CheckPEHeadersRequest)
}

::google::protobuf::uint8* CheckPEHeadersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.CheckPEHeadersRequest)
  // required uint64 base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->base(), target);
  }

  // required uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.CheckPEHeadersRequest)
  return target;
}

int CheckPEHeadersRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base());
    }

    // required uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPEHeadersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckPEHeadersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckPEHeadersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckPEHeadersRequest::MergeFrom(const CheckPEHeadersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckPEHeadersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPEHeadersRequest::CopyFrom(const CheckPEHeadersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPEHeadersRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CheckPEHeadersRequest::Swap(CheckPEHeadersRequest* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckPEHeadersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPEHeadersRequest_descriptor_;
  metadata.reflection = CheckPEHeadersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckPEHeadersResult_Exports::kEaFieldNumber;
const int CheckPEHeadersResult_Exports::kOrdFieldNumber;
const int CheckPEHeadersResult_Exports::kNameFieldNumber;
#endif  // !_MSC_VER

CheckPEHeadersResult_Exports::CheckPEHeadersResult_Exports()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.CheckPEHeadersResult.Exports)
}

void CheckPEHeadersResult_Exports::InitAsDefaultInstance() {
}

CheckPEHeadersResult_Exports::CheckPEHeadersResult_Exports(const CheckPEHeadersResult_Exports& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.CheckPEHeadersResult.Exports)
}

void CheckPEHeadersResult_Exports::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ea_ = GOOGLE_ULONGLONG(0);
  ord_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckPEHeadersResult_Exports::~CheckPEHeadersResult_Exports() {
  // @@protoc_insertion_point(destructor:rpc.CheckPEHeadersResult.Exports)
  SharedDtor();
}

void CheckPEHeadersResult_Exports::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CheckPEHeadersResult_Exports::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPEHeadersResult_Exports::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPEHeadersResult_Exports_descriptor_;
}

const CheckPEHeadersResult_Exports& CheckPEHeadersResult_Exports::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

CheckPEHeadersResult_Exports* CheckPEHeadersResult_Exports::default_instance_ = NULL;

CheckPEHeadersResult_Exports* CheckPEHeadersResult_Exports::New() const {
  return new CheckPEHeadersResult_Exports;
}

void CheckPEHeadersResult_Exports::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheckPEHeadersResult_Exports*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ea_, ord_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckPEHeadersResult_Exports::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.CheckPEHeadersResult.Exports)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ea = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ea_)));
          set_has_ea();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ord;
        break;
      }

      // required uint64 ord = 2;
      case 2: {
        if (tag == 16) {
         parse_ord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ord_)));
          set_has_ord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.CheckPEHeadersResult.Exports)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.CheckPEHeadersResult.Exports)
  return false;
#undef DO_
}

void CheckPEHeadersResult_Exports::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.CheckPEHeadersResult.Exports)
  // required uint64 ea = 1;
  if (has_ea()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ea(), output);
  }

  // required uint64 ord = 2;
  if (has_ord()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ord(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.CheckPEHeadersResult.Exports)
}

::google::protobuf::uint8* CheckPEHeadersResult_Exports::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.CheckPEHeadersResult.Exports)
  // required uint64 ea = 1;
  if (has_ea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ea(), target);
  }

  // required uint64 ord = 2;
  if (has_ord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ord(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.CheckPEHeadersResult.Exports)
  return target;
}

int CheckPEHeadersResult_Exports::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ea = 1;
    if (has_ea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ea());
    }

    // required uint64 ord = 2;
    if (has_ord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ord());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPEHeadersResult_Exports::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckPEHeadersResult_Exports* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckPEHeadersResult_Exports*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckPEHeadersResult_Exports::MergeFrom(const CheckPEHeadersResult_Exports& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ea()) {
      set_ea(from.ea());
    }
    if (from.has_ord()) {
      set_ord(from.ord());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckPEHeadersResult_Exports::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPEHeadersResult_Exports::CopyFrom(const CheckPEHeadersResult_Exports& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPEHeadersResult_Exports::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CheckPEHeadersResult_Exports::Swap(CheckPEHeadersResult_Exports* other) {
  if (other != this) {
    std::swap(ea_, other->ea_);
    std::swap(ord_, other->ord_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckPEHeadersResult_Exports::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPEHeadersResult_Exports_descriptor_;
  metadata.reflection = CheckPEHeadersResult_Exports_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CheckPEHeadersResult_Section::kNameFieldNumber;
const int CheckPEHeadersResult_Section::kVaFieldNumber;
const int CheckPEHeadersResult_Section::kVSizeFieldNumber;
const int CheckPEHeadersResult_Section::kRawFieldNumber;
const int CheckPEHeadersResult_Section::kRawSizeFieldNumber;
const int CheckPEHeadersResult_Section::kCharacteristicsFieldNumber;
#endif  // !_MSC_VER

CheckPEHeadersResult_Section::CheckPEHeadersResult_Section()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.CheckPEHeadersResult.Section)
}

void CheckPEHeadersResult_Section::InitAsDefaultInstance() {
}

CheckPEHeadersResult_Section::CheckPEHeadersResult_Section(const CheckPEHeadersResult_Section& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.CheckPEHeadersResult.Section)
}

void CheckPEHeadersResult_Section::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  va_ = GOOGLE_ULONGLONG(0);
  v_size_ = GOOGLE_ULONGLONG(0);
  raw_ = GOOGLE_ULONGLONG(0);
  raw_size_ = GOOGLE_ULONGLONG(0);
  characteristics_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckPEHeadersResult_Section::~CheckPEHeadersResult_Section() {
  // @@protoc_insertion_point(destructor:rpc.CheckPEHeadersResult.Section)
  SharedDtor();
}

void CheckPEHeadersResult_Section::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CheckPEHeadersResult_Section::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPEHeadersResult_Section::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPEHeadersResult_Section_descriptor_;
}

const CheckPEHeadersResult_Section& CheckPEHeadersResult_Section::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

CheckPEHeadersResult_Section* CheckPEHeadersResult_Section::default_instance_ = NULL;

CheckPEHeadersResult_Section* CheckPEHeadersResult_Section::New() const {
  return new CheckPEHeadersResult_Section;
}

void CheckPEHeadersResult_Section::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheckPEHeadersResult_Section*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(va_, characteristics_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckPEHeadersResult_Section::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.CheckPEHeadersResult.Section)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_va;
        break;
      }

      // optional uint64 va = 2;
      case 2: {
        if (tag == 16) {
         parse_va:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &va_)));
          set_has_va();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_v_size;
        break;
      }

      // optional uint64 v_size = 3;
      case 3: {
        if (tag == 24) {
         parse_v_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &v_size_)));
          set_has_v_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_raw;
        break;
      }

      // optional uint64 raw = 4;
      case 4: {
        if (tag == 32) {
         parse_raw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &raw_)));
          set_has_raw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_raw_size;
        break;
      }

      // optional uint64 raw_size = 5;
      case 5: {
        if (tag == 40) {
         parse_raw_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &raw_size_)));
          set_has_raw_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_characteristics;
        break;
      }

      // optional uint32 characteristics = 6;
      case 6: {
        if (tag == 48) {
         parse_characteristics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &characteristics_)));
          set_has_characteristics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.CheckPEHeadersResult.Section)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.CheckPEHeadersResult.Section)
  return false;
#undef DO_
}

void CheckPEHeadersResult_Section::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.CheckPEHeadersResult.Section)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 va = 2;
  if (has_va()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->va(), output);
  }

  // optional uint64 v_size = 3;
  if (has_v_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->v_size(), output);
  }

  // optional uint64 raw = 4;
  if (has_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->raw(), output);
  }

  // optional uint64 raw_size = 5;
  if (has_raw_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->raw_size(), output);
  }

  // optional uint32 characteristics = 6;
  if (has_characteristics()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->characteristics(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.CheckPEHeadersResult.Section)
}

::google::protobuf::uint8* CheckPEHeadersResult_Section::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.CheckPEHeadersResult.Section)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 va = 2;
  if (has_va()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->va(), target);
  }

  // optional uint64 v_size = 3;
  if (has_v_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->v_size(), target);
  }

  // optional uint64 raw = 4;
  if (has_raw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->raw(), target);
  }

  // optional uint64 raw_size = 5;
  if (has_raw_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->raw_size(), target);
  }

  // optional uint32 characteristics = 6;
  if (has_characteristics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->characteristics(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.CheckPEHeadersResult.Section)
  return target;
}

int CheckPEHeadersResult_Section::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 va = 2;
    if (has_va()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->va());
    }

    // optional uint64 v_size = 3;
    if (has_v_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->v_size());
    }

    // optional uint64 raw = 4;
    if (has_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->raw());
    }

    // optional uint64 raw_size = 5;
    if (has_raw_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->raw_size());
    }

    // optional uint32 characteristics = 6;
    if (has_characteristics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->characteristics());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPEHeadersResult_Section::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckPEHeadersResult_Section* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckPEHeadersResult_Section*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckPEHeadersResult_Section::MergeFrom(const CheckPEHeadersResult_Section& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_va()) {
      set_va(from.va());
    }
    if (from.has_v_size()) {
      set_v_size(from.v_size());
    }
    if (from.has_raw()) {
      set_raw(from.raw());
    }
    if (from.has_raw_size()) {
      set_raw_size(from.raw_size());
    }
    if (from.has_characteristics()) {
      set_characteristics(from.characteristics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckPEHeadersResult_Section::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPEHeadersResult_Section::CopyFrom(const CheckPEHeadersResult_Section& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPEHeadersResult_Section::IsInitialized() const {

  return true;
}

void CheckPEHeadersResult_Section::Swap(CheckPEHeadersResult_Section* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(va_, other->va_);
    std::swap(v_size_, other->v_size_);
    std::swap(raw_, other->raw_);
    std::swap(raw_size_, other->raw_size_);
    std::swap(characteristics_, other->characteristics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckPEHeadersResult_Section::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPEHeadersResult_Section_descriptor_;
  metadata.reflection = CheckPEHeadersResult_Section_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CheckPEHeadersResult::kPeValidFieldNumber;
const int CheckPEHeadersResult::kExpsFieldNumber;
const int CheckPEHeadersResult::kSectionsFieldNumber;
#endif  // !_MSC_VER

CheckPEHeadersResult::CheckPEHeadersResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.CheckPEHeadersResult)
}

void CheckPEHeadersResult::InitAsDefaultInstance() {
}

CheckPEHeadersResult::CheckPEHeadersResult(const CheckPEHeadersResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.CheckPEHeadersResult)
}

void CheckPEHeadersResult::SharedCtor() {
  _cached_size_ = 0;
  pe_valid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckPEHeadersResult::~CheckPEHeadersResult() {
  // @@protoc_insertion_point(destructor:rpc.CheckPEHeadersResult)
  SharedDtor();
}

void CheckPEHeadersResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckPEHeadersResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPEHeadersResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPEHeadersResult_descriptor_;
}

const CheckPEHeadersResult& CheckPEHeadersResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

CheckPEHeadersResult* CheckPEHeadersResult::default_instance_ = NULL;

CheckPEHeadersResult* CheckPEHeadersResult::New() const {
  return new CheckPEHeadersResult;
}

void CheckPEHeadersResult::Clear() {
  pe_valid_ = false;
  exps_.Clear();
  sections_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckPEHeadersResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.CheckPEHeadersResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool pe_valid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pe_valid_)));
          set_has_pe_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exps;
        break;
      }

      // repeated .rpc.CheckPEHeadersResult.Exports exps = 2;
      case 2: {
        if (tag == 18) {
         parse_exps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exps;
        if (input->ExpectTag(26)) goto parse_sections;
        break;
      }

      // repeated .rpc.CheckPEHeadersResult.Section sections = 3;
      case 3: {
        if (tag == 26) {
         parse_sections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sections;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.CheckPEHeadersResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.CheckPEHeadersResult)
  return false;
#undef DO_
}

void CheckPEHeadersResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.CheckPEHeadersResult)
  // required bool pe_valid = 1;
  if (has_pe_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->pe_valid(), output);
  }

  // repeated .rpc.CheckPEHeadersResult.Exports exps = 2;
  for (int i = 0; i < this->exps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exps(i), output);
  }

  // repeated .rpc.CheckPEHeadersResult.Section sections = 3;
  for (int i = 0; i < this->sections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sections(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.CheckPEHeadersResult)
}

::google::protobuf::uint8* CheckPEHeadersResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.CheckPEHeadersResult)
  // required bool pe_valid = 1;
  if (has_pe_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->pe_valid(), target);
  }

  // repeated .rpc.CheckPEHeadersResult.Exports exps = 2;
  for (int i = 0; i < this->exps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->exps(i), target);
  }

  // repeated .rpc.CheckPEHeadersResult.Section sections = 3;
  for (int i = 0; i < this->sections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sections(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.CheckPEHeadersResult)
  return target;
}

int CheckPEHeadersResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool pe_valid = 1;
    if (has_pe_valid()) {
      total_size += 1 + 1;
    }

  }
  // repeated .rpc.CheckPEHeadersResult.Exports exps = 2;
  total_size += 1 * this->exps_size();
  for (int i = 0; i < this->exps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exps(i));
  }

  // repeated .rpc.CheckPEHeadersResult.Section sections = 3;
  total_size += 1 * this->sections_size();
  for (int i = 0; i < this->sections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sections(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPEHeadersResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckPEHeadersResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckPEHeadersResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckPEHeadersResult::MergeFrom(const CheckPEHeadersResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  exps_.MergeFrom(from.exps_);
  sections_.MergeFrom(from.sections_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pe_valid()) {
      set_pe_valid(from.pe_valid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckPEHeadersResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPEHeadersResult::CopyFrom(const CheckPEHeadersResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPEHeadersResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->exps())) return false;
  return true;
}

void CheckPEHeadersResult::Swap(CheckPEHeadersResult* other) {
  if (other != this) {
    std::swap(pe_valid_, other->pe_valid_);
    exps_.Swap(&other->exps_);
    sections_.Swap(&other->sections_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckPEHeadersResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPEHeadersResult_descriptor_;
  metadata.reflection = CheckPEHeadersResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBackendInfoResult::kBitnessFieldNumber;
const int GetBackendInfoResult::kDbgNameFieldNumber;
const int GetBackendInfoResult::kDbgVerFieldNumber;
const int GetBackendInfoResult::kLabelessVerFieldNumber;
#endif  // !_MSC_VER

GetBackendInfoResult::GetBackendInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.GetBackendInfoResult)
}

void GetBackendInfoResult::InitAsDefaultInstance() {
}

GetBackendInfoResult::GetBackendInfoResult(const GetBackendInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.GetBackendInfoResult)
}

void GetBackendInfoResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bitness_ = 0u;
  dbg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbg_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  labeless_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBackendInfoResult::~GetBackendInfoResult() {
  // @@protoc_insertion_point(destructor:rpc.GetBackendInfoResult)
  SharedDtor();
}

void GetBackendInfoResult::SharedDtor() {
  if (dbg_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbg_name_;
  }
  if (dbg_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbg_ver_;
  }
  if (labeless_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete labeless_ver_;
  }
  if (this != default_instance_) {
  }
}

void GetBackendInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBackendInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBackendInfoResult_descriptor_;
}

const GetBackendInfoResult& GetBackendInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

GetBackendInfoResult* GetBackendInfoResult::default_instance_ = NULL;

GetBackendInfoResult* GetBackendInfoResult::New() const {
  return new GetBackendInfoResult;
}

void GetBackendInfoResult::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    bitness_ = 0u;
    if (has_dbg_name()) {
      if (dbg_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbg_name_->clear();
      }
    }
    if (has_dbg_ver()) {
      if (dbg_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbg_ver_->clear();
      }
    }
    if (has_labeless_ver()) {
      if (labeless_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        labeless_ver_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBackendInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.GetBackendInfoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bitness = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitness_)));
          set_has_bitness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dbg_name;
        break;
      }

      // required string dbg_name = 2;
      case 2: {
        if (tag == 18) {
         parse_dbg_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbg_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbg_name().data(), this->dbg_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbg_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dbg_ver;
        break;
      }

      // optional string dbg_ver = 3;
      case 3: {
        if (tag == 26) {
         parse_dbg_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbg_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbg_ver().data(), this->dbg_ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbg_ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_labeless_ver;
        break;
      }

      // required string labeless_ver = 4;
      case 4: {
        if (tag == 34) {
         parse_labeless_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_labeless_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labeless_ver().data(), this->labeless_ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labeless_ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.GetBackendInfoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.GetBackendInfoResult)
  return false;
#undef DO_
}

void GetBackendInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.GetBackendInfoResult)
  // required uint32 bitness = 1;
  if (has_bitness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bitness(), output);
  }

  // required string dbg_name = 2;
  if (has_dbg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbg_name().data(), this->dbg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbg_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dbg_name(), output);
  }

  // optional string dbg_ver = 3;
  if (has_dbg_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbg_ver().data(), this->dbg_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbg_ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dbg_ver(), output);
  }

  // required string labeless_ver = 4;
  if (has_labeless_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labeless_ver().data(), this->labeless_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labeless_ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->labeless_ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.GetBackendInfoResult)
}

::google::protobuf::uint8* GetBackendInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.GetBackendInfoResult)
  // required uint32 bitness = 1;
  if (has_bitness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bitness(), target);
  }

  // required string dbg_name = 2;
  if (has_dbg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbg_name().data(), this->dbg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbg_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dbg_name(), target);
  }

  // optional string dbg_ver = 3;
  if (has_dbg_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbg_ver().data(), this->dbg_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbg_ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbg_ver(), target);
  }

  // required string labeless_ver = 4;
  if (has_labeless_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labeless_ver().data(), this->labeless_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labeless_ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->labeless_ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.GetBackendInfoResult)
  return target;
}

int GetBackendInfoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bitness = 1;
    if (has_bitness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitness());
    }

    // required string dbg_name = 2;
    if (has_dbg_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbg_name());
    }

    // optional string dbg_ver = 3;
    if (has_dbg_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbg_ver());
    }

    // required string labeless_ver = 4;
    if (has_labeless_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->labeless_ver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBackendInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBackendInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBackendInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBackendInfoResult::MergeFrom(const GetBackendInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bitness()) {
      set_bitness(from.bitness());
    }
    if (from.has_dbg_name()) {
      set_dbg_name(from.dbg_name());
    }
    if (from.has_dbg_ver()) {
      set_dbg_ver(from.dbg_ver());
    }
    if (from.has_labeless_ver()) {
      set_labeless_ver(from.labeless_ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBackendInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBackendInfoResult::CopyFrom(const GetBackendInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBackendInfoResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void GetBackendInfoResult::Swap(GetBackendInfoResult* other) {
  if (other != this) {
    std::swap(bitness_, other->bitness_);
    std::swap(dbg_name_, other->dbg_name_);
    std::swap(dbg_ver_, other->dbg_ver_);
    std::swap(labeless_ver_, other->labeless_ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBackendInfoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBackendInfoResult_descriptor_;
  metadata.reflection = GetBackendInfoResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoCompleteCodeRequest::kSourceFieldNumber;
const int AutoCompleteCodeRequest::kZlineFieldNumber;
const int AutoCompleteCodeRequest::kZcolFieldNumber;
const int AutoCompleteCodeRequest::kCallSigOnlyFieldNumber;
#endif  // !_MSC_VER

AutoCompleteCodeRequest::AutoCompleteCodeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.AutoCompleteCodeRequest)
}

void AutoCompleteCodeRequest::InitAsDefaultInstance() {
}

AutoCompleteCodeRequest::AutoCompleteCodeRequest(const AutoCompleteCodeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.AutoCompleteCodeRequest)
}

void AutoCompleteCodeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zline_ = 0u;
  zcol_ = 0u;
  call_sig_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoCompleteCodeRequest::~AutoCompleteCodeRequest() {
  // @@protoc_insertion_point(destructor:rpc.AutoCompleteCodeRequest)
  SharedDtor();
}

void AutoCompleteCodeRequest::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void AutoCompleteCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoCompleteCodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoCompleteCodeRequest_descriptor_;
}

const AutoCompleteCodeRequest& AutoCompleteCodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

AutoCompleteCodeRequest* AutoCompleteCodeRequest::default_instance_ = NULL;

AutoCompleteCodeRequest* AutoCompleteCodeRequest::New() const {
  return new AutoCompleteCodeRequest;
}

void AutoCompleteCodeRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AutoCompleteCodeRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(zline_, call_sig_only_);
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoCompleteCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.AutoCompleteCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zline;
        break;
      }

      // required uint32 zline = 2;
      case 2: {
        if (tag == 16) {
         parse_zline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zline_)));
          set_has_zline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zcol;
        break;
      }

      // required uint32 zcol = 3;
      case 3: {
        if (tag == 24) {
         parse_zcol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zcol_)));
          set_has_zcol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_call_sig_only;
        break;
      }

      // required bool call_sig_only = 4;
      case 4: {
        if (tag == 32) {
         parse_call_sig_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &call_sig_only_)));
          set_has_call_sig_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.AutoCompleteCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.AutoCompleteCodeRequest)
  return false;
#undef DO_
}

void AutoCompleteCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.AutoCompleteCodeRequest)
  // required string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // required uint32 zline = 2;
  if (has_zline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zline(), output);
  }

  // required uint32 zcol = 3;
  if (has_zcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zcol(), output);
  }

  // required bool call_sig_only = 4;
  if (has_call_sig_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->call_sig_only(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.AutoCompleteCodeRequest)
}

::google::protobuf::uint8* AutoCompleteCodeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.AutoCompleteCodeRequest)
  // required string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // required uint32 zline = 2;
  if (has_zline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zline(), target);
  }

  // required uint32 zcol = 3;
  if (has_zcol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zcol(), target);
  }

  // required bool call_sig_only = 4;
  if (has_call_sig_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->call_sig_only(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.AutoCompleteCodeRequest)
  return target;
}

int AutoCompleteCodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // required uint32 zline = 2;
    if (has_zline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zline());
    }

    // required uint32 zcol = 3;
    if (has_zcol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zcol());
    }

    // required bool call_sig_only = 4;
    if (has_call_sig_only()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoCompleteCodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoCompleteCodeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoCompleteCodeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoCompleteCodeRequest::MergeFrom(const AutoCompleteCodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_zline()) {
      set_zline(from.zline());
    }
    if (from.has_zcol()) {
      set_zcol(from.zcol());
    }
    if (from.has_call_sig_only()) {
      set_call_sig_only(from.call_sig_only());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoCompleteCodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoCompleteCodeRequest::CopyFrom(const AutoCompleteCodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoCompleteCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AutoCompleteCodeRequest::Swap(AutoCompleteCodeRequest* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(zline_, other->zline_);
    std::swap(zcol_, other->zcol_);
    std::swap(call_sig_only_, other->call_sig_only_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoCompleteCodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoCompleteCodeRequest_descriptor_;
  metadata.reflection = AutoCompleteCodeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoCompleteCodeResult_CallSignature_Param::kNameFieldNumber;
const int AutoCompleteCodeResult_CallSignature_Param::kDescriptionFieldNumber;
#endif  // !_MSC_VER

AutoCompleteCodeResult_CallSignature_Param::AutoCompleteCodeResult_CallSignature_Param()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.AutoCompleteCodeResult.CallSignature.Param)
}

void AutoCompleteCodeResult_CallSignature_Param::InitAsDefaultInstance() {
}

AutoCompleteCodeResult_CallSignature_Param::AutoCompleteCodeResult_CallSignature_Param(const AutoCompleteCodeResult_CallSignature_Param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.AutoCompleteCodeResult.CallSignature.Param)
}

void AutoCompleteCodeResult_CallSignature_Param::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoCompleteCodeResult_CallSignature_Param::~AutoCompleteCodeResult_CallSignature_Param() {
  // @@protoc_insertion_point(destructor:rpc.AutoCompleteCodeResult.CallSignature.Param)
  SharedDtor();
}

void AutoCompleteCodeResult_CallSignature_Param::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void AutoCompleteCodeResult_CallSignature_Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoCompleteCodeResult_CallSignature_Param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoCompleteCodeResult_CallSignature_Param_descriptor_;
}

const AutoCompleteCodeResult_CallSignature_Param& AutoCompleteCodeResult_CallSignature_Param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

AutoCompleteCodeResult_CallSignature_Param* AutoCompleteCodeResult_CallSignature_Param::default_instance_ = NULL;

AutoCompleteCodeResult_CallSignature_Param* AutoCompleteCodeResult_CallSignature_Param::New() const {
  return new AutoCompleteCodeResult_CallSignature_Param;
}

void AutoCompleteCodeResult_CallSignature_Param::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoCompleteCodeResult_CallSignature_Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.AutoCompleteCodeResult.CallSignature.Param)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.AutoCompleteCodeResult.CallSignature.Param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.AutoCompleteCodeResult.CallSignature.Param)
  return false;
#undef DO_
}

void AutoCompleteCodeResult_CallSignature_Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.AutoCompleteCodeResult.CallSignature.Param)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.AutoCompleteCodeResult.CallSignature.Param)
}

::google::protobuf::uint8* AutoCompleteCodeResult_CallSignature_Param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.AutoCompleteCodeResult.CallSignature.Param)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.AutoCompleteCodeResult.CallSignature.Param)
  return target;
}

int AutoCompleteCodeResult_CallSignature_Param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoCompleteCodeResult_CallSignature_Param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoCompleteCodeResult_CallSignature_Param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoCompleteCodeResult_CallSignature_Param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoCompleteCodeResult_CallSignature_Param::MergeFrom(const AutoCompleteCodeResult_CallSignature_Param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoCompleteCodeResult_CallSignature_Param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoCompleteCodeResult_CallSignature_Param::CopyFrom(const AutoCompleteCodeResult_CallSignature_Param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoCompleteCodeResult_CallSignature_Param::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AutoCompleteCodeResult_CallSignature_Param::Swap(AutoCompleteCodeResult_CallSignature_Param* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoCompleteCodeResult_CallSignature_Param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoCompleteCodeResult_CallSignature_Param_descriptor_;
  metadata.reflection = AutoCompleteCodeResult_CallSignature_Param_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AutoCompleteCodeResult_CallSignature::kCsTypeFieldNumber;
const int AutoCompleteCodeResult_CallSignature::kNameFieldNumber;
const int AutoCompleteCodeResult_CallSignature::kIndexFieldNumber;
const int AutoCompleteCodeResult_CallSignature::kRawDocFieldNumber;
const int AutoCompleteCodeResult_CallSignature::kParamsFieldNumber;
#endif  // !_MSC_VER

AutoCompleteCodeResult_CallSignature::AutoCompleteCodeResult_CallSignature()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.AutoCompleteCodeResult.CallSignature)
}

void AutoCompleteCodeResult_CallSignature::InitAsDefaultInstance() {
}

AutoCompleteCodeResult_CallSignature::AutoCompleteCodeResult_CallSignature(const AutoCompleteCodeResult_CallSignature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.AutoCompleteCodeResult.CallSignature)
}

void AutoCompleteCodeResult_CallSignature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cs_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  raw_doc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoCompleteCodeResult_CallSignature::~AutoCompleteCodeResult_CallSignature() {
  // @@protoc_insertion_point(destructor:rpc.AutoCompleteCodeResult.CallSignature)
  SharedDtor();
}

void AutoCompleteCodeResult_CallSignature::SharedDtor() {
  if (cs_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cs_type_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (raw_doc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raw_doc_;
  }
  if (this != default_instance_) {
  }
}

void AutoCompleteCodeResult_CallSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoCompleteCodeResult_CallSignature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoCompleteCodeResult_CallSignature_descriptor_;
}

const AutoCompleteCodeResult_CallSignature& AutoCompleteCodeResult_CallSignature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

AutoCompleteCodeResult_CallSignature* AutoCompleteCodeResult_CallSignature::default_instance_ = NULL;

AutoCompleteCodeResult_CallSignature* AutoCompleteCodeResult_CallSignature::New() const {
  return new AutoCompleteCodeResult_CallSignature;
}

void AutoCompleteCodeResult_CallSignature::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_cs_type()) {
      if (cs_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cs_type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    index_ = 0;
    if (has_raw_doc()) {
      if (raw_doc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        raw_doc_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoCompleteCodeResult_CallSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.AutoCompleteCodeResult.CallSignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cs_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cs_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cs_type().data(), this->cs_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cs_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_raw_doc;
        break;
      }

      // optional string raw_doc = 4;
      case 4: {
        if (tag == 34) {
         parse_raw_doc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_doc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->raw_doc().data(), this->raw_doc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "raw_doc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_params;
        break;
      }

      // repeated .rpc.AutoCompleteCodeResult.CallSignature.Param params = 5;
      case 5: {
        if (tag == 42) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.AutoCompleteCodeResult.CallSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.AutoCompleteCodeResult.CallSignature)
  return false;
#undef DO_
}

void AutoCompleteCodeResult_CallSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.AutoCompleteCodeResult.CallSignature)
  // optional string cs_type = 1;
  if (has_cs_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cs_type().data(), this->cs_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cs_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cs_type(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // optional string raw_doc = 4;
  if (has_raw_doc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->raw_doc().data(), this->raw_doc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raw_doc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->raw_doc(), output);
  }

  // repeated .rpc.AutoCompleteCodeResult.CallSignature.Param params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.AutoCompleteCodeResult.CallSignature)
}

::google::protobuf::uint8* AutoCompleteCodeResult_CallSignature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.AutoCompleteCodeResult.CallSignature)
  // optional string cs_type = 1;
  if (has_cs_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cs_type().data(), this->cs_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cs_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cs_type(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // optional string raw_doc = 4;
  if (has_raw_doc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->raw_doc().data(), this->raw_doc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raw_doc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->raw_doc(), target);
  }

  // repeated .rpc.AutoCompleteCodeResult.CallSignature.Param params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.AutoCompleteCodeResult.CallSignature)
  return target;
}

int AutoCompleteCodeResult_CallSignature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cs_type = 1;
    if (has_cs_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cs_type());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional string raw_doc = 4;
    if (has_raw_doc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_doc());
    }

  }
  // repeated .rpc.AutoCompleteCodeResult.CallSignature.Param params = 5;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoCompleteCodeResult_CallSignature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoCompleteCodeResult_CallSignature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoCompleteCodeResult_CallSignature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoCompleteCodeResult_CallSignature::MergeFrom(const AutoCompleteCodeResult_CallSignature& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cs_type()) {
      set_cs_type(from.cs_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_raw_doc()) {
      set_raw_doc(from.raw_doc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoCompleteCodeResult_CallSignature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoCompleteCodeResult_CallSignature::CopyFrom(const AutoCompleteCodeResult_CallSignature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoCompleteCodeResult_CallSignature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->params())) return false;
  return true;
}

void AutoCompleteCodeResult_CallSignature::Swap(AutoCompleteCodeResult_CallSignature* other) {
  if (other != this) {
    std::swap(cs_type_, other->cs_type_);
    std::swap(name_, other->name_);
    std::swap(index_, other->index_);
    std::swap(raw_doc_, other->raw_doc_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoCompleteCodeResult_CallSignature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoCompleteCodeResult_CallSignature_descriptor_;
  metadata.reflection = AutoCompleteCodeResult_CallSignature_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AutoCompleteCodeResult::kCompletionsFieldNumber;
const int AutoCompleteCodeResult::kCallSigsFieldNumber;
#endif  // !_MSC_VER

AutoCompleteCodeResult::AutoCompleteCodeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.AutoCompleteCodeResult)
}

void AutoCompleteCodeResult::InitAsDefaultInstance() {
}

AutoCompleteCodeResult::AutoCompleteCodeResult(const AutoCompleteCodeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.AutoCompleteCodeResult)
}

void AutoCompleteCodeResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoCompleteCodeResult::~AutoCompleteCodeResult() {
  // @@protoc_insertion_point(destructor:rpc.AutoCompleteCodeResult)
  SharedDtor();
}

void AutoCompleteCodeResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoCompleteCodeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoCompleteCodeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoCompleteCodeResult_descriptor_;
}

const AutoCompleteCodeResult& AutoCompleteCodeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

AutoCompleteCodeResult* AutoCompleteCodeResult::default_instance_ = NULL;

AutoCompleteCodeResult* AutoCompleteCodeResult::New() const {
  return new AutoCompleteCodeResult;
}

void AutoCompleteCodeResult::Clear() {
  completions_.Clear();
  call_sigs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoCompleteCodeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.AutoCompleteCodeResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string completions = 1;
      case 1: {
        if (tag == 10) {
         parse_completions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_completions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->completions(this->completions_size() - 1).data(),
            this->completions(this->completions_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "completions");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_completions;
        if (input->ExpectTag(18)) goto parse_call_sigs;
        break;
      }

      // repeated .rpc.AutoCompleteCodeResult.CallSignature call_sigs = 2;
      case 2: {
        if (tag == 18) {
         parse_call_sigs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_call_sigs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_call_sigs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.AutoCompleteCodeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.AutoCompleteCodeResult)
  return false;
#undef DO_
}

void AutoCompleteCodeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.AutoCompleteCodeResult)
  // repeated string completions = 1;
  for (int i = 0; i < this->completions_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->completions(i).data(), this->completions(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "completions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->completions(i), output);
  }

  // repeated .rpc.AutoCompleteCodeResult.CallSignature call_sigs = 2;
  for (int i = 0; i < this->call_sigs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->call_sigs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.AutoCompleteCodeResult)
}

::google::protobuf::uint8* AutoCompleteCodeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.AutoCompleteCodeResult)
  // repeated string completions = 1;
  for (int i = 0; i < this->completions_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->completions(i).data(), this->completions(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "completions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->completions(i), target);
  }

  // repeated .rpc.AutoCompleteCodeResult.CallSignature call_sigs = 2;
  for (int i = 0; i < this->call_sigs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->call_sigs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.AutoCompleteCodeResult)
  return target;
}

int AutoCompleteCodeResult::ByteSize() const {
  int total_size = 0;

  // repeated string completions = 1;
  total_size += 1 * this->completions_size();
  for (int i = 0; i < this->completions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->completions(i));
  }

  // repeated .rpc.AutoCompleteCodeResult.CallSignature call_sigs = 2;
  total_size += 1 * this->call_sigs_size();
  for (int i = 0; i < this->call_sigs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->call_sigs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoCompleteCodeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoCompleteCodeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoCompleteCodeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoCompleteCodeResult::MergeFrom(const AutoCompleteCodeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  completions_.MergeFrom(from.completions_);
  call_sigs_.MergeFrom(from.call_sigs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoCompleteCodeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoCompleteCodeResult::CopyFrom(const AutoCompleteCodeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoCompleteCodeResult::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->call_sigs())) return false;
  return true;
}

void AutoCompleteCodeResult::Swap(AutoCompleteCodeResult* other) {
  if (other != this) {
    completions_.Swap(&other->completions_);
    call_sigs_.Swap(&other->call_sigs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoCompleteCodeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoCompleteCodeResult_descriptor_;
  metadata.reflection = AutoCompleteCodeResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
